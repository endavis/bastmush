<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="miniwin_stats"
   author="Bast"
   id="eee90c778a44169e1e1d9585"
   language="Lua"
   purpose="display stats in a miniwindow, includes quests, cps, etc"
   date_written="2008-07-18"
   requires="4.73"
   version="6.1"
   save_state="y"
   >
<description trim="y">
Redirects the map to a mini window.

add a button to gq tab to toggle between won, lost, or all
</description>

</plugin>

<!--  Script  -->

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require 'var'
require 'pluginhelper'
require "miniwin"
require "tprint"
require "commas"
require "serialize"
require "tablefuncs"
require "stringfuncs"
require "ldplugin"
require "chardb"
require "aardutils"

char = {}
db = Statdb:new{}
linewidth = 44

statwin = Miniwin:new{name="Stats"}
statwin:set_default('maxlines', 21)
statwin:set_default('width_padding', 5)
statwin:set_default('header_height', 0)
statwin:set_default("maxtabs", 6)
statwin:add_setting("maxitems", {help="the number of last items to show for each tab", type="number", default=5, sortlev=1, longname="Number of last items to show"})
statwin:add_setting("showwhichgqs", {help="which gqs to show, 1 = all, 2 = won, 3 = not won", type="number", low=1, high=3, default=1, sortlev=1, longname="Which GQs are shown"})

popupwin = Miniwin:new{name="Info"}
popupwin:set_default('use_tabwin', false)
popupwin:set_default('header_height', 0)
popupwin:set_default("maxtabs", 1)
popupwin:set_default('windowpos', 12)

gqmobcache = {}
cpmobcache = {}

function roundto(val, decimal)
  local tval = -1
  --print('rounding', val, ' to ', decimal, 'places')
  if (decimal) then
    tval = math.floor( (val * 10^decimal) + 0.5) / (10^decimal)
  else
    tval = math.floor(val+0.5)
  end
  --print('returned', tval)
  return tval
end


function build_stat_window()
  local styles = {}

  local tstyle = format_stat('Strength', char.stats.str, char.maxstats.maxstr, 13, 3)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('HP', char.vitals.hp, char.maxstats.maxhp, 5, #tostring(char.maxstats.maxhp)))
  table.insert(styles, tstyle)

  local tstyle = format_stat('Intelligence', char.stats.int, char.maxstats.maxint, 13, 3)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('Mana', char.vitals.mana, char.maxstats.maxmana, 5, #tostring(char.maxstats.maxmana)))
  table.insert(styles, tstyle)

  local tstyle = format_stat('Wisdom', char.stats.wis, char.maxstats.maxwis, 13, 3)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('Moves', char.vitals.moves, char.maxstats.maxmoves, 5, #tostring(char.stats.max_moves)))
  table.insert(styles, tstyle)

  local tstyle = format_stat('Dexterity', char.stats.dex, char.maxstats.maxdex, 13, 3)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('Saves', char.stats.saves, nil, 5, #tostring(char.stats.hitroll)))
  table.insert(styles, tstyle)

  local tstyle = format_stat('Constitution', char.stats.con, char.maxstats.maxcon, 13, 3)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('HR', char.stats.hr, nil, 5, #tostring(char.stats.hr)))
  table.insert(styles, tstyle)

  local tstyle = format_stat('Luck', char.stats.luck, char.maxstats.maxluck, 13, 3)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('DR', char.stats.dr, nil, 5, #tostring(char.stats.dr)))
  table.insert(styles, tstyle)

  local totalstats = (char.stats.str + char.stats.int + char.stats.wis
                      + char.stats.dex + char.stats.con + char.stats.luck)
  local totaltrainstats = (char.maxstats.maxstr + char.maxstats.maxint + char.maxstats.maxwis
                           + char.maxstats.maxdex + char.maxstats.maxcon + char.maxstats.maxluck)

  tstyle = format_stat('Total', totalstats, totaltrainstats, 13, 4)
  table.insert(tstyle, {text="  "})
  local alignment = tonumber(char.status.align)
  local zeroed_alignment = alignment+2500
  local aligncolour = ((zeroed_alignment<=1625 and 0x0000ff) or ((zeroed_alignment>=3375 and 0x00ffff)))
  tableExtend(tstyle, format_stat('Align', char.status.align, nil, 5, #tostring(char.status.align), aligncolour))
  table.insert(styles, tstyle)

  tstyle = format_stat('Trains', char.worth.trains, nil, 13, 7)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('Pracs', char.worth.pracs, nil, 5, #tostring(char.worth.pracs)))
  table.insert(styles, tstyle)

  tstyle = format_stat('XP to Level', char.status.tnl, nil, 13, 7)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('Level', char.status.level, nil, 5, #tostring(char.status.level), "#00EE00"))
  table.insert(styles, tstyle)

  tstyle = format_stat('QP', char.worth.qp, nil, 13, 7)
  table.insert(tstyle, {text="    "})
  tableExtend(tstyle, format_stat('TP', char.worth.tp, nil, 5, #tostring(char.worth.tp)))
  table.insert(styles, tstyle)

  tstyle = format_stat('Gold', char.worth.gold, nil, 13, #tostring(char.worth.gold), 'gold')
  table.insert(styles, tstyle)

  tstyle = format_stat('Bank', char.worth.bank, nil, 13, #tostring(char.worth.bank), 'gold')
  table.insert(styles, tstyle)

  statwin:addtab('Stats', styles, nil, nil, true, 1)

end

function build_level_window()
  local styles = {}
  local stats = {}
  stats['levels'] = {}
  stats['pups'] = {}
  if db:getlastrowid('stats') <= 0 then
    return
  end
  if db:getlastrowid('levels') <= 0 then
    return
  end
  if db:open() then
    for a in db.db:rows("SELECT totallevels, qpearned FROM stats WHERE milestone = 'current'") do
      stats.levels['total'] = a[1] or 0
      stats.levels['qpearned'] = a[2] or 0
    end
    for a in db.db:rows("SELECT MAX(powerupsall) FROM stats") do
      stats.pups['total'] = a[1] or 0
    end
    if totallevels then
      stats.levels['qpave'] = qpearned/totallevels
    else
      stats.levels['qpave'] = 0
    end
    for a in db.db:nrows([[SELECT AVG(trains) as avetrains,
                                 AVG(bonustrains) as avebonustrains,
                                 AVG(blessingtrains) as aveblessingtrains,
                                 SUM(trains + bonustrains + blessingtrains) as totaltrains,
                                 SUM(pracs) as totalpracs,
                                 COUNT(*) as indb
                                 FROM levels where type = 'level' and trains > 0]]) do
      stats.levels['avetrains'] = a['avetrains'] or 0
      stats.levels['avebonustrains'] = a['avebonustrains'] or 0
      stats.levels['aveblessingtrains'] = a['aveblessingtrains'] or 0
      stats.levels['totaltrains'] = a['totaltrains'] or 0
      stats.levels['totalpracs'] = a['totalpracs'] or 0
      stats.levels['avetotaltrains'] = tonumber(stats.levels['avetrains']) + tonumber(stats.levels['avebonustrains']) + tonumber(stats.levels['aveblessingtrains'])
      stats.levels['indb'] = a['indb'] or 0
    end

    for a in db.db:rows("SELECT AVG(finishtime - starttime) FROM levels where type = 'level' and finishtime <> -1 and trains > 0" ) do
      stats.levels['avetime'] = a[1] or 0
    end

    for a in db.db:nrows([[SELECT AVG(trains) as avetrains,
                                 AVG(bonustrains) as avebonustrains,
                                 AVG(blessingtrains) as aveblessingtrains,
                                 SUM(trains + bonustrains + blessingtrains) as totaltrains,
                                 COUNT(*) as indb
                                 FROM levels where type = 'pup']]) do
      stats.pups['avetrains'] = a['avetrains'] or 0
      stats.pups['avebonustrains'] = a['avebonustrains'] or 0
      stats.pups['aveblessingtrains'] = a['aveblessingtrains'] or 0
      stats.pups['totaltrains'] = a['totaltrains'] or 0
      stats.pups['avetotaltrains'] = tonumber(stats.pups['avetrains']) + tonumber(stats.pups['avebonustrains']) + tonumber(stats.pups['aveblessingtrains'])
      stats.pups['indb'] = a['indb'] or 0
    end

    for a in db.db:rows("SELECT AVG(finishtime - starttime) FROM levels where type = 'pup' and finishtime <> -1" ) do
      stats.pups['avetime'] = a[1] or 0
    end

    if stats.levels['indb'] > 1 or stats.pups['indb'] > 0 then
      local allstyles = {}

      local linestyles = format_row("Type", "Levels", "Pups", "lime", "lime")
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})

      local linestyles = format_row("Total Overall", stats.levels['total'], stats.pups['total'])
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Total in DB", stats.levels['indb'], stats.pups['indb'])
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Total Trains", stats.levels['totaltrains'], stats.pups['totaltrains'])
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Ave Trains",
          tonumber(string.format("%.3f", stats.levels['avetrains'] or 0)),
          tonumber(string.format("%.3f", stats.pups['avetrains'] or 0)))
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Ave Bon Trains",
          tonumber(string.format("%.3f", stats.levels['avebonustrains'] or 0)),
          tonumber(string.format("%.3f", stats.pups['avebonustrains'] or 0)))
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Ave Bls Trains",
          tonumber(string.format("%.3f", stats.levels['aveblessingtrains'] or 0)),
          tonumber(string.format("%.3f", stats.pups['aveblessingtrains'] or 0)))
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Ave Overall",
          tonumber(string.format("%.3f", stats.levels['avetotaltrains'])),
          tonumber(string.format("%.3f", stats.pups['avetotaltrains'])))
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Total Pracs", stats.levels['totalpracs'], "")
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Ave Time", convert_time(stats.levels['avetime']), convert_time(stats.pups['avetime']))
      table.insert(allstyles, linestyles)

      local lstyle = {}

      table.insert(allstyles, {{text = ''}})
      local tstr = "  Last " .. statwin.maxitems .. "  "
      local tstrlen = #tstr
      local replen = (linewidth - tstrlen) / 2
      --print(tstrlen, linewidth, replen)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)

      local style = {}
      style.text = tstr
      table.insert(lstyle, style)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)
      table.insert(allstyles, lstyle)

      local lstyle = {}
      local style = {}
      style.text = string.format("%3s ", "Lvl")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Level or Pup"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TR")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trains"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "BT")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Bonus + Blessing Trains"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "PR")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Practices"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%-2s ", "HP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Hit Points"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "MN")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Mana"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "MV")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Moves"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%1s ", "S")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Str bonus"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%1s ", "I")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Int bonus"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%1s ", "W")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Wis bonus"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%1s ", "C")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Con bonus"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%1s ", "D")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Dex bonus"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%1s ", "L")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Luck bonus"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%7s ", "  Time")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Time in the format days:hours:minutes"
      table.insert(lstyle, style)

      table.insert(allstyles, lstyle)

      table.insert(allstyles, {{text = string.rep('-', linewidth)}})

      local lastitems = db:getlast('levels', statwin.maxitems)
      --tprint(lastitems)

      for i,v in tableSort(lastitems, nil, nil, true) do
        local level = convertlevel(v.level)
        local length = v.finishtime - v.starttime
        local years, days, hours, mins, secs = SecondsToDHMS(length)

        local lstyle = {}
        local style = {}
        if v.type == 'level' then
          style.text = string.format("%3s ", tostring(level.level))
        else
          style.text = string.format("%3s ", "Pup")
        end
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2s ", tostring(v.trains))
        style.textcolour = "white"
        table.insert(lstyle, style)

        if not v.blessingtrains then
          v.blessingtrains = 0
        end
        local style = {}
        style.text = string.format("%2s ", tostring(v.bonustrains + v.blessingtrains))
        style.textcolour = "white"
        style.mouseup = nofunc
        style.hint = ""
        if v.bonustrains > 0 then
          style.hint = style.hint .. " " .. tostring(v.bonustrains) .. " Bonus"
        end
        if v.blessingtrains > 0 then
          if style.hint ~= "" then
            style.hint = style.hint .. ' + '
          end
          style.hint = style.hint .. " " .. tostring(v.blessingtrains) .. " Blessing"
        end
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2s ", tostring(v.pracs))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%-2s ", tostring(v.hp))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2s ", tostring(v.mp))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2s ", tostring(v.mv))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%1s ", tostring(v.str))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%1s ", tostring(v.int))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%1s ", tostring(v.wis))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%1s ", tostring(v.con))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%1s ", tostring(v.dex))
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%1s ", tostring(v.luc))
        style.textcolour = "white"
        table.insert(lstyle, style)

        if v.finishtime ~= -1 then
          local style = {}
          style.text = string.format("%3s:%02s:%02s", tostring(days), tostring(hours), tostring(mins))
          style.textcolour = "white"
          style.hint = string.format('Started: %s\nFinished: %s', os.date("%c", v.starttime), os.date("%c", v.finishtime))
          style.mouseup = nofunc
          table.insert(lstyle, style)
        end

        table.insert(allstyles, lstyle)
      end

      statwin:addtab('Levels', allstyles, nil, nil, nil, 2)
    end
    db:close()
  end
end

function build_quest_window()
  local styles = {}
  local stats = {}
  if db:getlastrowid('stats') <= 0 then
    return
  end
  if db:getlastrowid('quests') <= 0 then
    return
  end
  if db:open() then
    for a in db.db:rows("SELECT qpearned, questscomplete, questsfailed, totallevels FROM stats WHERE milestone = 'current'") do
      stats['qpearned'] = a[1]
      stats['questcomp'] = a[2]
      stats['questfailed'] = a[3]
      stats['totallevels'] = a[4]
    end
    if stats['totallevels'] then
      stats['qplevelave'] = stats['qpearned']/stats['totallevels']
    end
    for a in db.db:nrows([[SELECT AVG(finishtime - starttime) as avetime,
                                 SUM(qp) as qp,
                                 AVG(qp) as qpquestave,
                                 SUM(tierqp) as tierqp,
                                 AVG(tierqp) as tierqpave,
                                 SUM(mccp) as mccp,
                                 AVG(mccp) as mccpave,
                                 SUM(lucky) as lucky,
                                 AVG(lucky) as luckyave,
                                 SUM(hardcore) as hardcore,
                                 AVG(hardcore) as hardcoreave,
                                 SUM(opk) as opk,
                                 AVG(opk) as opkave,
                                 SUM(tp) as tp,
                                 AVG(tp) as tpave,
                                 SUM(trains) as trains,
                                 AVG(trains) as trainsave,
                                 SUM(pracs) as pracs,
                                 AVG(pracs) as pracsave,
                                 COUNT(*) as qindb,
                                 SUM(totqp) as dboverall,
                                 AVG(totqp) as dboverallave,
                                 SUM(gold) as gold,
                                 AVG(gold) as avegold FROM quests where failed = 0]]) do
      stats['avetime'] = a['avetime']
      stats['qp'] = a['qp']
      stats['qpquestave'] = a['qpquestave']
      stats['tierqp'] = a['tierqp']
      stats['tierqpave'] = a['tierqpave'] or 0
      if stats['tierqpave'] == "" then
        stats['tierqpave'] = 0
      end
      stats['mccp'] = a['mccp']
      stats['mccpave'] = a['mccpave']
      stats['hardcore'] = a['hardcore']
      stats['hardcoreave'] = a['hardcoreave']
      stats['opk'] = a['opk']
      stats['opkave'] = a['opkave']
      stats['lucky'] = a['lucky']
      stats['luckyave'] = a['luckyave']
      stats['tp'] = a['tp']
      stats['tpave'] = a['tpave']
      stats['trains'] = a['trains']
      stats['trainsave'] = a['trainsave']
      stats['pracs'] = a['pracs']
      stats['pracsave'] = a['pracsave']
      stats['qindb'] = a['qindb']
      stats['dboverall'] = a['dboverall']
      stats['dboverallave'] = a['dboverallave']
      stats['gold'] = a['gold']
      stats['avegold'] = a['avegold']
    end
    if stats['qindb'] > 0 then
      for a in db.db:rows("SELECT COUNT(*) FROM quests where failed != 0") do
        stats['failedindb'] = a[1]
      end
      stats['indb'] = stats['failedindb'] + stats['qindb']

      local allstyles = {}

      local linestyles = format_row("DB Stats", "Total", "In DB", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("Quests", stats['questcomp'] + stats['questfailed'], stats['indb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Quests Comp", stats['questcomp'], stats['qindb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Quests Failed", stats['questfailed'], stats['failedindb'])
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("QP Stats", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("Overall QP", stats['qpearned'], string.format("%.3f", stats['qplevelave'] or 0) .. '/level')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Quest QP", stats['qp'], string.format("%.3f", stats['qpquestave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("MCCP",
          stats['mccp'],
          string.format("%.3f", stats['mccpave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Lucky",
          stats['lucky'],
          string.format("%.3f", stats['luckyave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Tier",
          stats['tierqp'],
          string.format("%.3f", stats['tierqpave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("PK",
          stats['opk'],
          string.format("%.3f", stats['opkave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("HC",
          stats['hardcore'],
          string.format("%.3f", stats['hardcoreave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("QP Per Quest", "", string.format("%.3f", stats['dboverallave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Gold",
          ReadableNumber(stats['gold'], 2),
          string.format("%d", stats['avegold'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Time", "", format_time(stats['avetime']))
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("Bonus Rewards", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("TP",
          stats['tp'],
          string.format("%.3f", stats['tpave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Trains",
          stats['trains'],
          string.format("%.3f", stats['trainsave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Pracs",
          stats['pracs'],
          string.format("%.3f", stats['pracsave'] or 0) .. '/quest')
      table.insert(allstyles, linestyles)


      local lstyle = {}

      table.insert(allstyles, {{text = ''}})
      local tstr = "  Last " .. statwin.maxitems .. "  "
      local tstrlen = #tstr
      local replen = (linewidth - tstrlen) / 2
      --print(tstrlen, linewidth, replen)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)

      local style = {}
      style.text = tstr
      table.insert(lstyle, style)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)
      table.insert(allstyles, lstyle)

      local lstyle = {}
      local style = {}
      style.text = string.format("%2s ", "QP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Mouseover this column to see mob, room, area"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "MC")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "MCCP QP"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TR")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Tier QP"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "LK")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Lucky QP"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%-3s ", "DBL")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Was this during double? D for Double QP, E for Blessing"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TL")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Total QP"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trivia Points"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TN")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trains"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "PR")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Practices"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%4s ", "Gold")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%3s ", "Lvl")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%4s", " Time")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Time in the format minutes:seconds"
      table.insert(lstyle, style)
      table.insert(allstyles, lstyle)

      table.insert(allstyles, {{text = string.rep('-', linewidth)}})

      local lastitems = db:getlast('quests', statwin.maxitems)
--      tprint(lastitems)

      for i,v in tableSort(lastitems, nil, nil, true) do
        local lstyle = {}

        local hint = strip_colours(v.mobname) .. ' - ' .. v.mobroom .. ' - ' .. v.mobarea
        local tname = utils.split(strip_colours(v.mobname), " ")
        local mname = tname[#tname]
        local tname = utils.split(v.mobroom, " ")
        local rname = tname[#tname]
        local tname = utils.split(v.mobarea, " ")
        local aname = tname[#tname]
        local level = convertlevel(v.level)
        local length = v.finishtime - v.starttime
        local years, days, hours, mins, secs = SecondsToDHMS(length)

        local style = {}
        style.text = string.format("%2d ", v.qp or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.mccp or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.tierqp or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.lucky or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        local ttext = ""
        local thint = ""
        if v.double == 1 then
          ttext = ttext .. "D"
          thint = thint .. "Double "
        end
        if v.daily == 1 then
          ttext = ttext .. "E"
          thint = thint .. "Blessing"
        end
        style.text = string.format("%3s ", ttext)
        style.mouseup = nofunc
        style.hint = thint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.totqp)
        style.mouseup = nofunc
        local thint = tostring(v.qp)
        if v.mccp > 0 then
          thint = thint .. "+" .. tostring(v.mccp) .. "(mccp)"
        end
        if v.tierqp > 0 then
          thint = thint .. "+" .. tostring(v.tierqp) .. "(tier)"
        end
        if v.lucky > 0 then
          thint = thint .. "+" .. tostring(v.lucky) .. "(lucky)"
        end
        if v.hardcore > 0 then
          thint = thint .. "+" .. tostring(v.hardcore) .. "(hardcore)"
        end
        if v.opk > 0 then
          thint = thint .. "+" .. tostring(v.opk) .. "(opk)"
        end
        if v.double == 1 then
          thint = thint .. "+" .. "Double"
        end
        if v.daily == 1 then
          thint = thint .. "+" .. "Daily"
        end
        style.hint = thint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.tp or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.trains or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.pracs or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%4d ", v.gold or 0)
        style.mouseup = nofunc
        style.hint = hint
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%3d ", level.level)
        style.hint = hint
        style.mouseup = nofunc
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        if v.failed ~= 1 then
          style.text = string.format("%2dm:%02ds", mins, secs)
        else
          style.text = "Failed"
        end
        style.mouseup = nofunc
        style.hint = string.format('Started: %s\nFinished: %s', os.date("%c", v.starttime), os.date("%c", v.finishtime))
        style.textcolour = "white"
        table.insert(lstyle, style)
        table.insert(allstyles, lstyle)

      end

      statwin:addtab('Quests', allstyles, nil, nil, nil, 3)
    end
    db:close()
  end

end

function build_cp_window()
  local styles = {}
  local stats = {}
  if db:getlastrowid('stats') <= 0 then
    return
  end
  if db:getlastrowid('campaigns') <= 0 then
    return
  end
  if db:open() then
    for a in db.db:rows("SELECT campaignsdone, campaignsfld, totallevels FROM stats WHERE milestone = 'current'") do
      stats['campaignsdone'] = a[1]
      stats['campaignsfld'] = a[2]
      stats['totallevels'] = a[3]
    end
    for a in db.db:rows("SELECT AVG(finishtime - starttime), SUM(qp), AVG(qp), SUM(tp), AVG(tp), SUM(trains), AVG(trains), SUM(pracs), AVG(pracs), COUNT(*), SUM(gold), AVG(gold) FROM campaigns where failed = 0") do
      stats['avetime'] = a[1]
      stats['qp'] = a[2]
      stats['qpcpave'] = a[3]
      stats['tp'] = a[4]
      stats['tpave'] = a[5]
      stats['trains'] = a[6]
      stats['trainsave'] = a[7]
      stats['pracs'] = a[8]
      stats['pracsave'] = a[9]
      stats['cindb'] = a[10]
      stats['gold'] = a[11]
      stats['avegold'] = a[12]
    end

    for a in db.db:rows("SELECT COUNT(*) FROM campaigns where failed != 0") do
      stats['failedindb'] = a[1]
    end

    if tonumber(stats['cindb']) > 0 then
      stats['indb'] = stats['failedindb'] + stats['cindb']

      local allstyles = {}

      local linestyles = format_row("DB Stats", "Total", "In DB", "lime", "lime")
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("CPs", stats['campaignsdone'] + stats['campaignsfld'], stats['indb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("CPs Comp", stats['campaignsdone'], stats['cindb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("CPs Failed", stats['campaignsfld'], stats['failedindb'])
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("CP Stats", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("CP QP", stats['qp'], string.format("%.3f", stats['qpcpave'] or 0) .. '/CP')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Gold",
          ReadableNumber(stats['gold'], 2),
          string.format("%d", stats['avegold'] or 0) .. '/CP')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Time", "", format_time(stats['avetime']))
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("Bonus Rewards", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("TP",
          stats['tp'],
          string.format("%.3f", stats['tpave'] or 0) .. '/CP')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Trains",
          stats['trains'],
          string.format("%.3f", stats['trainsave'] or 0) .. '/CP')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Pracs",
          stats['pracs'],
          string.format("%.3f", stats['pracsave'] or 0) .. '/CP')
      table.insert(allstyles, linestyles)

      local lstyle = {}

      table.insert(allstyles, {{text = ''}})
      local tstr = "  Last " .. statwin.maxitems .. "  "
      local tstrlen = #tstr
      local replen = (linewidth - tstrlen) / 2
      --print(tstrlen, linewidth, replen)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)

      local style = {}
      style.text = tstr
      table.insert(lstyle, style)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)
      table.insert(allstyles, lstyle)

      local lstyle = {}

      local style = {}
      style.text = string.format("%-12s ", "Lvl")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "QP")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "TP"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TN")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trains"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "PR")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Practices"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%6s ", "Gold")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%3s ", "Mobs")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Mouseover this column for a popup with the mobs"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%6s", " Time")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Time in the format hours:minutes:seconds"
      table.insert(lstyle, style)

      table.insert(allstyles, lstyle)

      table.insert(allstyles, {{text = string.rep('-', linewidth)}})

      local lastitems = db:getlast('campaigns', statwin.maxitems)
      --tprint(lastitems)

      local mobcounts = {}
      if db:open() then
        for a in db.db:nrows('SELECT cp_id, count(*) as mobcount from cpmobs group by cp_id') do
          mobcounts[a.cp_id] = a.mobcount
        end
        db:close()
      end

      for i,v in tableSort(lastitems, nil, nil, true) do
        local lstyle = {}

        local level  = convertlevel(v.level)
        local levelstr = 'T' .. tostring(level.tier) .. ' R' .. tostring(level.remort) .. ' L' .. tostring(level.level)
        local length = 'Unknown'
        local years, days, hours, mins, secs = -1, -1, -1, -1, -1
        if v.starttime then
          length = v.finishtime - v.starttime
          years, days, hours, mins, secs = SecondsToDHMS(length)
        end

        local style = {}
        style.text = string.format("%-12s ", levelstr)
        --style.mouseup = nofunc
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.qp or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.tp or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.trains or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.pracs or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%6d ", v.gold or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%3d ", mobcounts[v.cp_id])
        style.mouseover = function()
          create_cp_popup(v.cp_id)
        end
        style.cancelmouseover = function (flags, hotspotid)
                      if not popupwin.clickshow then
                        popupwin:show(false)
                      end
                    end
        style.mousedown = function (flags, hotspotid)
                      popupwin.clickshow = not popupwin.clickshow
                    end
        table.insert(lstyle, style)

        local style = {}
        if v.failed ~= 1 then
          style.text = string.format("%2d:%02d:%02d", hours, mins, secs)
        else
          style.text = "Failed"
        end
        style.hint = string.format('Started: %s\nFinished: %s', os.date("%c", v.starttime), os.date("%c", v.finishtime))
        style.mouseup = nofunc
        style.textcolour = "white"
        table.insert(lstyle, style)

        table.insert(allstyles, lstyle)
      end


      statwin:addtab('CPs', allstyles, nil, nil, nil, 4)

    end
    db:close()
  end

end

function create_cp_popup(cp_id)
  local allstyles = {}

  if cpmobcache[cp_id] then
    allstyles = cpmobcache[cp_id]
  else
    local mobs = {}

    if db:open() then
      for a in db.db:nrows('SELECT * from cpmobs where cp_id = ' .. cp_id) do
        mobs[a.cpmob_id] = a
      end
      db:close()
    end

    local lstyle = {}

    local style = {}
    style.text = string.format("%-30s ", "Mob")
    style.textcolour = "lightseagreen"
    table.insert(lstyle, style)

    local style = {}
    style.text = string.format("%-s ", "Location")
    style.textcolour = "lightseagreen"
    table.insert(lstyle, style)

    table.insert(allstyles, lstyle)
    table.insert(allstyles, {{text = string.rep('-', linewidth)}})

    for i,v in tableSort(mobs) do

      local lstyle = {}

      local style = {}
      style.text = string.format("%-30s ", strip_colours(v.name))
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%-s ", v.location)
      table.insert(lstyle, style)

      table.insert(allstyles, lstyle)
      cpmobcache[cp_id] = allstyles
    end

  end

  popupwin:addtab('Default', allstyles)
  popupwin:show(true)

end

function build_gq_window()

  local styles = {}
  local stats = {}
  if db:getlastrowid('stats') <= 0 then
    return
  end
  if db:getlastrowid('gquests') <= 0 then
    return
  end
  if db:open() then
    for a in db.db:rows("SELECT gquestswon FROM stats WHERE milestone = 'current'") do
      stats['gquestswon'] = a[1]
    end
    stats['won'] = {}
    for a in db.db:nrows([[SELECT AVG(finishtime - starttime) as avetime,
                                 SUM(qp) as qp,
                                 AVG(qp) as qpave,
                                 SUM(qpmobs) as qpmobs,
                                 AVG(qpmobs) as qpmobsave,
                                 SUM(tp) as tp,
                                 AVG(tp) as tpave,
                                 SUM(trains) as trains,
                                 AVG(trains) as trainsave,
                                 SUM(pracs) as pracs,
                                 AVG(pracs) as pracsave,
                                 COUNT(*) as indb,
                                 SUM(gold) as gold,
                                 AVG(gold) as avegold FROM gquests where won = 1]]) do
      stats['won']['avetime'] = a['avetime']
      stats['won']['qp'] = a['qp']
      stats['won']['qpave'] = a['qpave']
      stats['won']['qpmobs'] = a['qpmobs']
      stats['won']['qpmobsave'] = a['qpmobsave']
      stats['won']['tp'] = a['tp']
      stats['won']['tpave'] = a['tpave']
      stats['won']['trains'] = a['trains']
      stats['won']['trainsave'] = a['trainsave']
      stats['won']['pracs'] = a['pracs']
      stats['won']['pracsave'] = a['pracsave']
      stats['won']['indb'] = a['indb']
      stats['won']['gold'] = a['gold']
      stats['won']['avegold'] = a['avegold']
    end
    stats['lost'] = {}
    for a in db.db:rows("SELECT AVG(finishtime - starttime), SUM(qpmobs), AVG(qpmobs), COUNT(*) FROM gquests where won != 1") do
      stats['lost']['avetime'] = a[1]
      stats['lost']['qpmobs'] = a[2]
      stats['lost']['qpmobsave'] = a[3]
      stats['lost']['indb'] = a[4]
    end

    for a in db.db:rows("SELECT SUM(qpmobs + qp), AVG(qpmobs + qp) FROM gquests") do
      stats['overallqp'] = a[1]
      stats['overallqpave'] = a[2]
    end

    if tonumber(stats.won.indb) > 0 or tonumber(stats.lost.indb) > 0 then
      stats['indb'] = stats['won']['indb'] + stats['lost']['indb']

      local allstyles = {}

      local linestyles = format_row("GQ Stats", "Total", "In DB", "lime", "lime")
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("GQs Won", stats['gquestswon'], stats['won']['indb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("GQs Lost", "", stats['lost']['indb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Overall", stats['gquestswon'] + stats['lost']['indb'], stats['won']['indb'] + stats['lost']['indb'])
      table.insert(allstyles, linestyles)
      local linestyles = format_row("QP", stats['overallqp'], string.format("%.3f", stats['overallqpave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("GQ Won Stats", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("GQ QP", stats['won']['qp'] or 0, string.format("%.3f", stats['won']['qpave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("GQ Mobs QP", stats['won']['qpmobs'] or 0, string.format("%.3f", stats['won']['qpmobsave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Time", "", format_time(stats['won']['avetime'] or 0))
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Gold",
          ReadableNumber(stats['won']['gold'], 2),
          string.format("%d", stats['won']['avegold'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("TP",
          stats['won']['tp'] or 0,
          string.format("%.3f", stats['won']['tpave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Trains",
          stats['won']['trains'] or 0,
          string.format("%.3f", stats['won']['trainsave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)
      local linestyles = format_row("Pracs",
          stats['won']['pracs'] or 0,
          string.format("%.3f", stats['won']['pracsave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("GQ Lost Stats", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)
      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})
      local linestyles = format_row("GQ Mobs QP", stats['lost']['qpmobs'] or 0, string.format("%.3f", stats['lost']['qpmobsave'] or 0) .. '/GQ')
      table.insert(allstyles, linestyles)

      local whereclause = nil
      local wherestring = "(All)"
      if statwin.showwhichgqs == 2 then
        whereclause = 'won = 1'
        wherestring = "(Won)"
      elseif statwin.showwhichgqs == 3 then
        whereclause = 'won = 0'
        wherestring = "(Lost)"
      end

      local lstyle = {}

      table.insert(allstyles, {{text = ''}})
      local tstr = "  Last " .. statwin.maxitems .. " "
      local tstrlen = #tstr + 9
      local replen = (linewidth - tstrlen) / 2

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)

      local style = {}
      style.text = tstr
      table.insert(lstyle, style)

      local style = {}
      style.text = '('
      table.insert(lstyle, style)

      local style = {}
      style.text = 'A'
      if statwin.showwhichgqs == 1 then
        style.textcolour = 'lime'
      end
      style.mouseup = function ()
        statwin:set('showwhichgqs', 1)
      end
      style.hint = 'Show All GQs'
      table.insert(lstyle, style)

      local style = {}
      style.text = '/'
      table.insert(lstyle, style)

      local style = {}
      style.text = 'W'
      if statwin.showwhichgqs == 2 then
        style.textcolour = 'lime'
      end
      style.mouseup = function ()
        statwin:set('showwhichgqs', 2)
      end
      style.hint = 'Show only GQs that were won'
      table.insert(lstyle, style)

      local style = {}
      style.text = '/'
      table.insert(lstyle, style)

      local style = {}
      style.text = 'L'
      if statwin.showwhichgqs == 3 then
        style.textcolour = 'lime'
      end
      style.mouseup = function ()
        statwin:set('showwhichgqs', 3)
      end
      style.hint = 'Show only GQs that were lost'
      table.insert(lstyle, style)

      local style = {}
      style.text = ')  '
      table.insert(lstyle, style)


      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)
      table.insert(allstyles, lstyle)

      local lstyle = {}

      local style = {}
      style.text = string.format("%-10s ", "Lvl")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "QP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "QP for Winning"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "QM")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "QP from Mobs"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trivia Points"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TN")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trains"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "PR")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Practices"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%6s ", "Gold")
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%3s ", "MB")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Mouseover this column for a popup with the mobs"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%6s", " Time")
      style.mouseup = nofunc
      style.hint = "Time in the format minutes:seconds"
      style.textcolour = "lightseagreen"
      table.insert(lstyle, style)

      table.insert(allstyles, lstyle)

      table.insert(allstyles, {{text = string.rep('-', linewidth)}})

      local lastitems = db:getlast('gquests', statwin.maxitems, whereclause)
      --tprint(lastitems)

      local mobcounts = {}
      if db:open() then
        for a in db.db:nrows('SELECT gq_id, SUM(num) as mobcount from gqmobs group by gq_id') do
          mobcounts[a.gq_id] = a.mobcount
        end
        db:close()
      end

      for i,v in tableSort(lastitems, nil, nil, true) do
        local lstyle = {}

        local level  = convertlevel(v.level)
        local levelstr = 'T' .. tostring(level.tier) .. ' R' .. tostring(level.remort) .. ' L' .. tostring(level.level)
        local length = v.finishtime - v.starttime
        local years, days, hours, mins, secs = SecondsToDHMS(length)

        local style = {}
        style.text = string.format("%-10s ", levelstr)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.qp or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.qpmobs or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.tp or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.trains or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2d ", v.pracs or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%6d ", v.gold or 0)
        style.textcolour = "white"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%3d ", mobcounts[v.gq_id] or -1)
        style.mouseover = function()
          create_gq_popup(v.gq_id)
        end
        style.cancelmouseover = function (flags, hotspotid)
                      if not popupwin.clickshow then
                        popupwin:show(false)
                      end
                    end
        style.mousedown = function (flags, hotspotid)
                      popupwin.clickshow = not popupwin.clickshow
                    end
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format(" %02d:%02d", mins, secs)
        style.textcolour = "white"
        style.hint = string.format('Started: %s\nFinished: %s', os.date("%c", v.starttime), os.date("%c", v.finishtime))
        style.mouseup = nofunc
        table.insert(lstyle, style)

        table.insert(allstyles, lstyle)
      end


      statwin:addtab('GQs', allstyles, nil, nil, nil, 5)
    end
    db:close()
  end

end

function create_gq_popup(gq_id)
  local allstyles = {}
  if gqmobcache[gq_id] then
    allstyles = gqmobcache[gq_id]
  else
    local mobs = {}

    if db:open() then
      for a in db.db:nrows('SELECT * from gqmobs where gq_id = ' .. gq_id) do
        mobs[a.gqmob_id] = a
      end
      db:close()
    end

    local lstyle = {}

    local style = {}
    style.text = string.format("%-1s ", "# *")
    style.textcolour = "lightseagreen"
    table.insert(lstyle, style)

    local style = {}
    style.text = string.format("%-30s ", "Mob")
    style.textcolour = "lightseagreen"
    table.insert(lstyle, style)

    local style = {}
    style.text = string.format("%-s ", "Location")
    style.textcolour = "lightseagreen"
    table.insert(lstyle, style)

    table.insert(allstyles, lstyle)
    table.insert(allstyles, {{text = string.rep('-', linewidth)}})

    for i,v in tableSort(mobs) do

      local lstyle = {}

      local style = {}
      style.text = string.format("%-1d * ", v.num)
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%-30s ", strip_colours(v.name))
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%-s ", v.location)
      table.insert(lstyle, style)

      table.insert(allstyles, lstyle)
      gqmobcache[gq_id] = allstyles
    end

  end

  popupwin:addtab('Default', allstyles)
  popupwin:show(true)

end

function build_kills_window()
  local styles = {}
  local stats = {}
  if db:getlastrowid('stats') <= 0 then
    return
  end
  if db:getlastrowid('mobkills') <= 0 then
    return
  end
  if db:open() then
    for a in db.db:rows("SELECT monsterskilled FROM stats WHERE milestone = 'current'") do
      stats['overall'] = a[1] or 0
    end

    for a in db.db:nrows([[SELECT SUM(xp) AS xp,
                                 SUM(rarexp) AS rarexp,
                                 SUM(bonusxp) AS bonusxp,
                                 SUM(blessingxp) AS blessingxp,
                                 AVG(xp) AS avexp,
                                 AVG(totalxp) AS avetotalxp,
                                 SUM(tp) AS tp,
                                 SUM(vorpal) AS vorpal,
                                 SUM(assassinate) AS assassinate,
                                 SUM(disintegrate) AS disintegrate,
                                 SUM(banishment) AS banishment,
                                 SUM(slit) AS slit,
                                 SUM(deathblow) AS deathblow,
                                 SUM(gold) AS gold,
                                 AVG(gold) AS avegold,
                                 COUNT(*) AS indb FROM mobkills]]) do
      stats['xp'] = a['xp'] or 0
      stats['rarexp'] = a['rarexp'] or 0
      stats['bonusxp'] = a['bonusxp'] or 0
      stats['blessingxp'] = a['blessingxp'] or 0
      stats['avexp'] = a['avexp'] or 0
      stats['avetotalxp'] = a['avetotalxp'] or 0
      stats['tp'] = a['tp'] or 0
      stats['vorpal'] = a['vorpal'] or 0
      stats['assassinate'] = a['assassinate'] or 0
      stats['disintegrate'] = a['disintegrate'] or 0
      stats['banishment'] = a['banishment'] or 0
      stats['slit'] = a['slit'] or 0
      stats['deathblow'] = a['deathblow'] or 0
      stats['gold'] = a['gold'] or 0
      stats['avegold'] = a['avegold'] or 0
      stats['indb'] = a['indb'] or 0
    end

    for a in db.db:rows("SELECT AVG(rarexp), COUNT(*) FROM mobkills where rarexp > 0") do
      stats['averarexp'] = a[1]
      stats['rarexpindb'] = a[2]
    end

    for a in db.db:rows("SELECT AVG(bonusxp), COUNT(*) FROM mobkills where bonusxp > 0") do
      stats['avebonusxp'] = a[1]
      stats['bonusxpindb'] = a[2]
    end

    for a in db.db:rows("SELECT AVG(blessingxp), COUNT(*) FROM mobkills where blessingxp > 0") do
      stats['aveblessingxp'] = a[1]
      stats['blessingxpindb'] = a[2]
    end

    if stats['indb'] > 0 then
      local allstyles = {}

      local linestyles = format_row("DB Stats", "Total", "In DB", "lime", "lime")
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})

      local linestyles = format_row("Total Overall", stats['overall'] or 0, stats['indb'] or 0)
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Mobs w/ Rare", "", stats['rarexpindb'] or 0)
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Mobs w/ Bonus", "", stats['bonusxpindb'] or 0)
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Mobs w/ Bless", "", stats['blessingxpindb'] or 0)
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local linestyles = format_row("Stats", "Total", "Average", "lime", "lime")
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = string.rep('-', linewidth), textcolour = "lime"}})

      local linestyles = format_row("XP", stats['xp'] or 0, string.format("%.3f", stats['avexp'] or 0) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Rare XP", stats['rarexp'] or 0, string.format("%.3f", stats['averarexp'] or 0) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Double XP", stats['bonusxp'] or 0, string.format("%.3f", stats['avebonusxp'] or 0) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Blessing XP", stats['blessingxp'] or 0, string.format("%.3f", stats['aveblessingxp'] or 0) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("All XP", (stats['xp'] or 0) + (stats['bonusxp']  or 0) + (stats['blessingxp']  or 0), string.format("%.3f", stats['avetotalxp']) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Gold", stats['gold'] or 0, string.format("%.3f", stats['avegold'] or 0) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("TP", stats['tp'] or 0, string.format("%.3f", stats['tp'] / stats['indb']) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Vorpal", stats['vorpal'] or 0, string.format("%.3f", (stats['vorpal'] or 0) / (stats['indb'] or 1)) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Assassinate", stats['assassinate'] or 0, string.format("%.3f", (stats['assassinate'] or 0) / (stats['indb'] or 1)) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Slit", stats['slit'] or 0, string.format("%.3f", (stats['slit'] or 0) / stats['indb']) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Banishment", stats['banishment'] or 0, string.format("%.3f", (stats['banishment'] or 0) / stats['indb']) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Deathblow", stats['deathblow'] or 0, string.format("%.3f", (stats['deathblow'] or 0) / stats['indb']) .. '/Kill')
      table.insert(allstyles, linestyles)

      local linestyles = format_row("Disintegrate", stats['disintegrate'] or 0, string.format("%.3f", (stats['disintegrate'] or 0) / stats['indb']) .. '/Kill')
      table.insert(allstyles, linestyles)

      table.insert(allstyles, {{text = ''}})

      local lstyle = {}

      local tstr = "  Last " .. statwin.maxitems .. "  "
      local tstrlen = #tstr
      local replen = (linewidth - tstrlen) / 2
      --print(tstrlen, linewidth, replen)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)

      local style = {}
      style.text = tstr
      table.insert(lstyle, style)

      local style = {}
      style.text = string.rep('-', replen)
      style.textcolour = "lime"
      table.insert(lstyle, style)
      table.insert(allstyles, lstyle)

      local lstyle = {}
      local style = {}
      style.text = string.format("%3s ", "Lvl")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Level"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%-18s ", "Mob")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Mob name"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%3s ", "XP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "XP"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%3s ", "OXP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Other XP (D for Double, E for Blessing)"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%2s ", "TP")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Trivia Mob"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%s ", "S")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Killed by an insta-kill spell/skill"
      table.insert(lstyle, style)

      local style = {}
      style.text = string.format("%s ", "Gold")
      style.textcolour = "lightseagreen"
      style.mouseup = nofunc
      style.hint = "Gold"
      table.insert(lstyle, style)

      table.insert(allstyles, lstyle)

      table.insert(allstyles, {{text = string.rep('-', linewidth)}})

      local lastitems = db:getlast('mobkills', statwin.maxitems)
--      tprint(lastitems)

      for i,v in tableSort(lastitems, nil, nil, true) do
        local lstyle = {}

        local level  = convertlevel(v.level)

        local style = {}
        style.text = string.format("%3d ", tonumber(level.level))
        style.textcolour = "white"
        style.mouseup = nofunc
        style.hint = "Level"
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%-18s ", string.sub(strip_colours(v.name), 1, 18))
        style.textcolour = "white"
        style.mouseup = nofunc
        style.hint = strip_colours(v.name)
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%3d ", tonumber(v.totalxp or 0) or 0)
        style.textcolour = "white"
        if v.noexp == 1 then
          style.textcolour = "red"
        end
        style.mouseup = nofunc
        local ttext = tostring(v.xp) .. "(XP)"
        if v.rarexp ~= 0 then
          ttext = ttext .. " + " .. tostring(v.rarexp) .. "(Rare)"
        end
        if v.bonusxp ~= 0 then
          ttext = ttext .. " + " .. tostring(v.bonusxp) .. "(Dbl)"
        end
        if v.blessingxp ~= 0 then
          ttext = ttext .. " + " .. tostring(v.blessingxp) .. "(Blessing)"
        end
        style.hint = ttext
        table.insert(lstyle, style)

        local style = {}
        local ttext = ""
        local thint = ""
        if v.bonusxp ~= 0 then
          ttext = ttext .. "D"
          thint = thint .. "Dbl "
        end
        if v.blessingxp ~= 0 then
          ttext = ttext .. "E"
          thint = thint .. "Blessing "
        end
        style.text = string.format("%3s ", ttext)
        style.textcolour = "white"
        if v.noexp == 1 then
          style.textcolour = "red"
        end
        style.mouseup = nofunc
        style.hint = thint
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%2s ", tostring(v.tp or ""))
        style.textcolour = "white"
        style.mouseup = nofunc
        style.hint = "Trivia Mob"
        table.insert(lstyle, style)

        local style = {}
        local tstr = ""
        if v.vorpal == 1 then
          tstr = "V"
          style.hint = "Vorpal - " .. "W: " .. v.wielded_weapon .. " S: " .. v.second_weapon
        elseif v.banishment == 1 then
          tstr = "B"
          style.hint = "Banishment"
        elseif v.assassinate == 1 then
          tstr = "A"
          style.hint = "Assassinate"
        elseif v.slit == 1 then
          tstr = "S"
          style.hint = "Slit"
        elseif v.deathblow == 1 then
          tstr = "D"
          style.hint = "Deathblow"
        elseif v.disintegrate == 1 then
          tstr = "I"
          style.hint = "Disintegrate"

        else

        end
        style.text = string.format("%2s ", tstr)
        style.textcolour = "white"
        style.mouseup = nofunc
        table.insert(lstyle, style)

        local style = {}
        style.text = string.format("%d", tonumber(v.gold or 0) or 0)
        style.textcolour = "white"
        style.mouseup = nofunc
        style.hint = "Gold"
        table.insert(lstyle, style)

        table.insert(allstyles, lstyle)

      end


      statwin:addtab('Kills', allstyles, nil, nil, nil, 6)
    end
    db:close()
  end
end


function format_row(rowname, data1, data2, datacolour, headercolour, width1, width2, width3)
  if not width1 then
    width1 = 14
  end
  if not width2 then
    width2 = 12
  end
  if not width3 then
    width3 = 12
  end
  local linestyles = {}

  local headercolour = headercolour or "lightseagreen"
  local datacolour = datacolour or "white"

  local style = {}
  style.text = string.format( "%-" .. tostring(width1) .. "s", tostring(rowname) )
  style.textcolour = headercolour
  table.insert(linestyles, style)

  local style = {}
  style.text = " :  "
  style.textcolour = headercolour
  table.insert(linestyles, style)

  local style = {}
  style.text = string.format( "%-" .. tostring(width2) .. "s", tostring(data1) )
  style.textcolour = datacolour
  table.insert(linestyles, style)

  local style = {}
  style.text = string.format( "%-" .. tostring(width3) .. "s", tostring(data2) )
  style.textcolour = datacolour
  table.insert(linestyles, style)
  return linestyles
end

function format_stat(statname, statcur, statother, colwidth, statlength, color)
    local allstyle = {}

    local style = {}
    style.text = string.format( "%-" .. tostring(colwidth) .. "s", statname )
    style.textcolour = "lightseagreen"
    table.insert(allstyle, style)

    local style = {}
    style.text = ' : '
    style.textcolour = "lightseagreen"
    --style.start = start
    table.insert(allstyle, style)

    local style = {}
    style.text = string.format( "%" .. tostring(statlength) .. "s",  statcur)
    if color then
      style.textcolour = color
    else
      style.textcolour = 'white'
    end
    table.insert(allstyle, style)

    if statother then
      local style = {}
      style.text = '/'
      style.textcolour = "lightseagreen"
      table.insert(allstyle, style)

      local style = {}
      style.text = string.format( "%-" .. tostring(statlength) .. "s",  statother)
      style.textcolour = 'white'
      table.insert(allstyle, style)
    end

    return allstyle
end

tab_funcs = {}
tab_funcs['Stats'] = build_stat_window
tab_funcs['Quests'] = build_quest_window
tab_funcs['Levels'] = build_level_window
tab_funcs['CPs'] = build_cp_window
tab_funcs['GQs'] = build_gq_window
tab_funcs['Kills'] = build_kills_window

function onmaxitemschange(object, args)
  if not statwin.classinit then
    for i,v in tableSort(tab_funcs) do
      if statwin:hastab(i) then
        v()
      end
    end
  end
end

function onshowwhichgqschange(object, args)
  if not statwin.classinit then
    build_gq_window()
  end
end

function onenable(object, args)
  if statwin.maxtabs < 6 then
    statwin:set('maxtabs', 6)
  end
end

statwin:registerevent('option_maxitems', statwin, onmaxitemschange)

statwin:registerevent('option_showwhichgqs', statwin, onshowwhichgqschange)

statwin:registerevent('enabled', statwin, onenable)

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
--stats.vitals { "hp": 5280, "mana": 4390, "moves": 5185 }
--stats.stats { "str": 233, "int": 177, "wis": 213, "dex": 329, "con": 181, "luck": 245, "hr": 309, "dr": 371, "saves": 51 }
--stats.maxstats { "maxhp": 5280, "maxmana": 4390, "maxmoves": 5185, "maxstr": 110, "maxint": 100, "maxwis": 131, "maxdex": 182, "maxcon": 108, "maxluck": 157 }
--stats.worth { "gold": 322802, "bank": 0, "qp": 5257, "tp": 2, "trains": 1, "pracs": 3 }
--stats.status { "level": 180, "tnl": 1428, "hunger": 70, "thirst": 70, "align": 74, "state": 8, "pos": "Fighting" , "enemy": "a mountain cyclops", "enemypct": 12 }
--stats.base { "name": "Bast", "class": "Thief", "subclass": "Ninja", "race": "Shadow", "clan": "", "pretitle": "", "perlevel": 5000 }

  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", "char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()

      if char['vitals'] and char['stats'] and char['maxstats'] and char['worth'] and char['status'] and char['base'] then
        build_stat_window()
        if IsPluginInstalled("a749d26f1cb3e00282727e55") and GetPluginInfo("a749d26f1cb3e00282727e55", 17) then
          if not statwin:hastab('Levels') then
            if db:getlastrowid('stats') > 0 then
              build_level_window()
            end
          end
          if not statwin:hastab('Quests') then
            if db:getlastrowid('stats') > 0 then
              build_quest_window()
            end
          end
          if not statwin:hastab('CPs') then
            if db:getlastrowid('stats') > 0 then
              build_cp_window()
            end
          end
          if not statwin:hastab('GQs') then
            if db:getlastrowid('stats') > 0 then
              build_gq_window()
            end
          end
          if not statwin:hastab('Kills') then
            if db:getlastrowid('stats') > 0 then
              build_kills_window()
            end
          end
        end
      end
    end
  else
    if IsPluginInstalled("a749d26f1cb3e00282727e55") and GetPluginInfo("a749d26f1cb3e00282727e55", 17) then
      if id == "aaa0ab9ed92f8fc614664bd1" and msg == 1 then
        if db:getlastrowid('stats') > 0 then
          DoAfterSpecial(.2, 'build_level_window()', 12)
        end
      elseif id == "aaa8a9eda20fa11787c6b438" and (msg == 6 or msg == 8) then
        if db:getlastrowid('stats') > 0 then
          DoAfterSpecial(.2, 'build_quest_window()', 12)
        end
      elseif id == "aaa66f81c50828bbbfda7100" and (msg == 3 or msg == 4) then
        if db:getlastrowid('stats') > 0 then
          DoAfterSpecial(.2, 'build_cp_window()', 12)
        end
      elseif id == "aaa77f81c5408278ccda7100" and msg == 4 then
        if db:getlastrowid('stats') > 0 then
          DoAfterSpecial(.2, 'build_gq_window()', 12)
        end
      elseif id == "aaa61c4570508448e19c7c14" and msg == 1 then
        if db:getlastrowid('stats') > 0 then
          DoAfterSpecial(.2, 'build_kills_window()', 12)
        end
      end
    end
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()
  --OnPluginDisable is automatically called by pluginhelper

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'mstat')
phelper:set_default('plugin_colour', 'steelblue')

phelper:add_pobject('win', statwin)
phelper:add_pobject('pwin', popupwin)

phelper:enable()

]]>
</script>
</muclient>
