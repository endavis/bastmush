<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xeqDB"
   author="Bast"
   id="aaa56faed92ffc6146964abc"
   language="Lua"
   purpose="add eq to a database and manage inventory"
   save_state="y"
   date_written="2009-02-22 14:20:07"
   requires="4.73"
   version="6.1"
   >

<description trim="y">
<![CDATA[
when you override the inventory command (also works with l i <container> and eq)
inv can have several arguments
 : a single level (inv 100) - will show any items level 100 or above
 : two levels (inv 1 100) - will show any items from level 1 to level 100
 : "-g" - don't group items
 : "+g" - group items (this is default)
 : "-f" - don't show flags
 : "+f" - show flags (this is default)
 : "+se" - show serial #s (default for inventory command)
 : "+sc" - show score
 : an item type: such as weapon, armor, container, food, etc see
       "eqdb translate objecttypes"
 : a word: the items shortname will contain this word
 : a sort field: +level, -level will sort by level

If you override the inventory commands on the mud, you can type the full
command to bypass eqdb

If you think your inventory does not reflect your actual inventory,
then type "eqdb refresh"
]]>
</description>
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>


<triggers>

 <trigger
   enabled="y"
   match="^Syntax: invdata                - view all inv data.$"
   omit_from_output="n"
   name="badinvdata1"
   sequence="100"
   regexp="y"
  >
  </trigger>

   <trigger
   enabled="y"
   match="^      : invdata <container id> - view all inv data in a container.$"
   omit_from_output="n"
   name="badinvdata2"
   sequence="100"
   regexp="y"
  >
  </trigger>

   <trigger
   enabled="y"
   match="^      : invdata ansi           - remove color codes from output.$"
   omit_from_output="n"
   name="badinvdata3"
   sequence="100"
   regexp="y"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^{invmon}(?&lt;action&gt;.*),(?&lt;serial&gt;.*),(?&lt;container&gt;.*),(?&lt;location&gt;.*)$"
   name="invmon"
   script="invmon"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>

 <trigger
   enabled="n"
   match="^{eqdata}$"
   script="eqdata_redirect"
   omit_from_output="n"
   name="start_eqdata"
   sequence="100"
   regexp="y"
   send_to="12"
  >
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="eqdata_redirect"
   name="multi_line_eqdata"
   omit_from_output="n"
   group="eqdata"
   sequence="10"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^\{invitem\}(.*)$"
   name="invitem"
   script="invitem"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>

 <trigger
   enabled="n"
   match="^{invdata\s*(?&lt;container&gt;.*)}$"
   script="invdata_redirect"
   omit_from_output="n"
   name="start_invdata"
   sequence="100"
   regexp="y"
   send_to="12"
  >
 </trigger>

  <trigger
   enabled="n"
   match="*"
   script="invdata_redirect"
   name="multi_line_invdata"
   omit_from_output="n"
   group="invdata"
   sequence="10"
  >
  </trigger>
  <trigger
   enabled="n"
   regexp="y"
   match="^$"
   script="emptyline"
   name="emptyline"
   omit_from_output="n"
   group="emptyline"
   sequence="10"
  >
  </trigger>
 <trigger
   enabled="n"
   match="^{invdetails}$"
   script="invdetails_redirect"
   omit_from_output="n"
   name="start_invdetails"
   sequence="100"
   regexp="y"
   send_to="12"
  >
  <send>
   EnableTrigger("start_invdetails", false)
  </send>
  </trigger>

  <trigger
   enabled="n"
   match="*"
   script="invdetails_redirect"
   name="multi_line_invdetails"
   omit_from_output="n"
   group="invdetails"
   sequence="10"
  >
  </trigger>
  <trigger
   enabled="n"
   match="+-----------------------------------------------------------------+"
   script="identify"
   name="identifyon"
   omit_from_output="n"
   group="identify"
   sequence="10"
  >
  </trigger>
  <trigger
   enabled="n"
   match="*"
   script="identify_redirect"
   name="multi_line_identify"
   omit_from_output="n"
   group="identify_redirect"
   sequence="10"
  >
  </trigger>
</triggers>

<timers>
  <timer
      script="dbbackup"
      enabled="y"
      hour="13"
      name="backuptimeronepm"
      at_time="y"
      >
  </timer>
  <timer
      script="dbbackup"
      enabled="y"
      hour="1"
      name="backuptimermidoneam"
      at_time="y"
      >
  </timer>
</timers>

<aliases>
  <alias
   name="cpm"
   match="^eqlu (.+)$"
   enabled="y"
   regexp="y"
   sequence="100"
   send_to="12"
  >
  <send>Execute(phelper.cmd .. " lu " .. "%1")</send>
  </alias>
</aliases>


<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "aardutils"
require 'colours'
require "eqdb"
require "formatitem"

db = EQdb:new{}

eqdata = {}
invdata = {}
need = {}
currentcontainer = nil
identdata = {}
lastidentkey = ''
container = ""
place = 0
initdb = false
wearingall = false
removingall = false
puttingall = false
gettingall = false
silent = true

allcontainer = -1

itemstoprint = {}
waitingforid = {}
putincontainer = {}

layout ={
invheader = {"serial", "level", "type", "worth", "weight", "wearable", "flags", "owner", "fromclan", "timer", "u1", "u2", "u3", "score"},
container = {"capacity", "heaviestitem", "holding", "itemsinside", "totalweight", "itemburden", "itemweightpercent"},
statmod = {"stat", "value"},
resistmod = {"resist", "value"},
weapon = {"wtype", "avedam", "inflicts", "damtype", "special"},
skillmod = {"skillnum", "value"},
spells = {"uses", "level", "sn1", "sn2", "sn3", "sn4", "u1"},
food = {"percent"},
drink = {"servings", "liquid", "liquidmax", "liquidleft", "thirstpercent", "hungerpercent", "u1"},
furniture = {"hpregen","manaregen","u1"},
eqdata = {"serial", "shortflags", "cname", "level", "type", "unique", "wearslot", "timer"},
light = {"duration"},
portal = {"uses"}
}

invitemcache = {}

function dbbackup(name)
  local day = os.date("%a", GetInfo(304))
  if name == "backuptimeronepm" then
    db:backupdb(day .. '.onepm')
  elseif name == "backuptimeroneam" then
    db:backupdb(day .. '.oneam')
  else
    db:backupdb(day)
  end
end

function sendcmd(cmd)
  --print('sending', cmd)
  if silent then
    SendNoEcho(cmd)
  else
    Send(cmd)
  end
end

function showoutput(stuff)
  if phelper.showoutput then
    print(stuff)
  end
end

function checkvaliditem(item)
  if item.serial == "" or item.serial == nil or
     item.level == "" or item.level == nil or
     item.type == "" or item.type == nil or
     item.name == "" or item.name == nil or
     item.cname == "" or item.cname == nil then
       return false
  end
  return true
end

function getdata(type)
  if type == 'Inventory' then
    EnableTrigger("start_invdata")
    sendcmd('invdata')
  elseif type == 'Worn' then
    EnableTrigger("start_eqdata")
    sendcmd('eqdata')
  else
   EnableTrigger("start_invdata")
   sendcmd('invdata ' .. tostring(type))
  end
  currentcontainer = type
end

function addcontainer(container)
  need[container] = 'yes'
  nextitem()
end

function nextitem()
  itemkey, itemvalue = tableRandomItem(need)
  if currentcontainer == nil  and itemkey ~= nil then
    getdata(itemkey)
  end
end

function addmod(ltype, mod)
  if invdetails[ltype] == nil then
    invdetails[ltype] = {}
  end
  invdetails[ltype][mod[1]] = tonumber(mod[2])
end

function event_container_change(containerid)
  timer_start('event_container_change')
  phelper:processevent('container_change', containerid)
  if containerid ~= 'Worn' and containerid ~= 'Inventory' then
    titem = db:getitemdetails(containerid)
    if titem and next(titem) then
      phelper:processevent('itemchange', titem)
    end
  end
  timer_end('event_container_change')
end

function event_wearloc_change(wearloc,action,item)
  timer_start('event_wearloc_change')
  --print("event_wearloc_change")
  --tprint({wearloc=wearloc,action=action,item=item})
  phelper:processevent('wearlocchange', {wearloc=wearloc,action=action,item=item})
  timer_end('event_wearloc_change')
end

function togglehideoutput(flag)
  --print('toggling hide output', flag)
  for i,v in ipairs({"identifyon", "multi_line_identify"}) do
    SetTriggerOption(v, "omit_from_output", flag);
  end
end

function identify(name, line, wildcards)
  if name == 'identifyon' then
    --print('enabling identify_redirect')
    phelper:enabletriggroup('identify_redirect', true)
    identdata = {}
    lastidentkey = ''
  end
end

function identify_redirect(name, line, wildcards, styles)
  if line == '' then
    --print('disabling identify_redirect')
    phelper:enabletriggroup('identify_redirect', false)
    --print('disabling identify')
    phelper:enabletriggroup('identify', false)
    togglehideoutput("n")
    --tprint(identdata)
    if identdata['note'] then
      local notel = identdata['note']
      identdata['note'] = {}
      table.insert(identdata['note'], strjoin(" ", notel))
    end
    --tprint(identdata)
    db:updateitemident(identdata)
    local invdetails = db:getitemdetails(identdata.id)
    phelper:processevent('itemchange', invdetails)
    phelper:processevent('oniddone')
    if itemstoprint[invdetails.serial] then
      itemstoprint[invdetails.serial] = nil
      print_itemid(invdetails)
    end
    if waitingforid[invdetails.serial] then
      waitingforid[invdetails.serial] = nil
    end
    if putincontainer[invdetails.serial] then
      putobjectincontainer(invdetails.serial, putincontainer[tonumber(invdetails.serial)])
      putincontainer[tonumber(invdetails.serial)] = nil
    end
    return
  end
  if line ~= "+-----------------------------------------------------------------+" then
    line = line:gsub("^| ", "")
    line = line:gsub(" |$", "")
    if line:match('^%s*Modifies (.*) by (.*)$') or line:match('^%s*Skill Mods : Modifies (.*) by (.*)$') then
      --print('found skill mod')
      -- Don't worry about skill mods, we get these from invdetails

    elseif line:find(':') then
      local tstuff = utils.split(line, ':')
      local tkey = trim(tstuff[1]:lower())
      local tkey = tkey:gsub(" ", "")
      local tvalue = trim(tstuff[2])
      if tkey ~= '' then
        lastidentkey = tkey
        identdata[tkey] = tvalue
      elseif lastidentkey ~= '' then
        identdata[lastidentkey] = identdata[lastidentkey] .. ' ' .. tostring(tvalue)
      else
        print('found unknown line')
        print(line)
      end
    else
      if trim(line) ~= 'A full appraisal will reveal further information on this item.' then
        if not identdata['note'] then
          identdata['note'] = {}
        end
        styles[1].text = styles[1].text:gsub("^| ", "")
        styles[1].text = trim(styles[1].text)
        styles[#styles].text = styles[#styles].text:gsub(" |$", "")
        styles[#styles].text = trim(styles[#styles].text)
        --table.remove(styles,#styles)
        table.insert(identdata['note'], trim(StylesToColoursOneLine(styles):gsub("^@w", "")))
        --print('found unknown line')
        --print(line)
      end
    end
  end
end

function dataparse(line, layoutname)
  local tlist = utils.split(line, ',')
  local wearloc = tlist[7]
  local titem = {}
  for i,v in ipairs(layout[layoutname]) do
    local value = tlist[i]
    if v == 'wearloc' or v == 'itemtype' or v == 'level' then
      value = tonumber(value)
    end
    titem[v] = value
  end
  return titem
end

function eqdata_redirect (name, line, wildcards, styles)
  -- start of spells list? remove old ones
  if name == "start_eqdata" then
    eqdata = {}
    container = 'Worn'
    phelper:enabletriggroup("eqdata", true)
    return
  elseif line == "{/eqdata}" then
    phelper:enabletriggroup("eqdata", false)
    db:clearcontainer(container)
    db:additems(eqdata)
    --db:addcontainer('worn', eqdata)
    event_container_change('Worn')
    currentcontainer = nil
    need['Worn'] = nil
    nextitem()
    return
  end -- if

  if line ~= "" then
    titem = dataparse(line, 'eqdata')
    titem.containerid = container
    titem.place = -2
    if (titem.cname ~= nil) then
      titem.name = strip_colours(titem.cname)
      -- else handled by checkvaliditem
    end
    if checkvaliditem(titem) then
      eqdata[titem.serial] = titem
    else
      ColourNote("red", "", "Got a bad item, rerequesting inventory data for " .. container)
      DoAfterSpecial(1, 'addcontainer("' .. container .. '")', 12)
    end
  end

end

function invdata_redirect (name, line, wildcards, styles)
  -- start of spells list? remove old ones
  if name == "start_invdata" then
    place = 0
    invdata = {}
    if wildcards.container ~= "" then
      container = trim(wildcards.container)
    else
      container = 'Inventory'
    end
    phelper:enabletriggroup("invdata", true)
    return
  elseif line == "{/invdata}" then
    phelper:enabletriggroup("invdata", false)
    db:clearcontainer(container)
    db:additems(invdata)
    --db:addcontainer(container, invdata)
    need[container] = nil
    currentcontainer = nil
    nextitem()
    if tableCountItems(need) == 0 then
      EnableTrigger("start_invdata", false)
    end
    event_container_change(container)
    if initdb then
      initdb = false
      getcontainers()
    end
    return
  end -- if

  place = place + 1
  titem = dataparse(line, 'eqdata')
  titem.containerid = container
  if (titem.cname ~= nil) then
    titem.name = strip_colours(titem.cname)
    -- else handled by checkvaliditem
  end
  titem.place = place
  if checkvaliditem(titem) then
    invdata[titem.serial] = titem
  else
    ColourNote("red", "", "Got a bad item, rerequesting inventory data for " .. container)
    DoAfterSpecial(1, 'addcontainer("' .. container .. '")', 12)
  end
end

function invdetails_redirect (name, line, wildcards, styles)
  -- start of spells list? remove old ones
  ltype = 'unknown'
  if name == "start_invdetails" then
    invdetails = {}
    timer_start('invdetails')
    phelper:enabletriggroup("invdetails", true)
    return
  elseif line == "{/invdetails}" then
    phelper:enabletriggroup("invdetails", false)
    local titem = db:getitem(invdetails.serial)
    invdetails.cname = titem.cname
    invdetails.name = titem.name
    invdetails.containerid = titem.containerid
    invdetails.type = titem.type
    timer_end('invdetails')
    db:additemdetail(invdetails)
    invdetails = db:getitemdetails(invdetails.serial)
    phelper:processevent('itemchange', invdetails)
    return
  end -- if

  ttype = string.match(line,"{(.*)}")
  if layout[ttype] then
    ltype = ttype
  else
    print('no layout for', ttype)
  end

  local tlist = utils.split(line, '}')
  local llist = utils.split(tlist[2], '|')
  if layout[ltype] then
    if ltype == "statmod" or ltype == "resistmod" or ltype == "skillmod" then
      addmod(ltype, llist)
    else
      for i,v in ipairs(layout[ltype]) do
        if ltype == 'invheader' then
          local value = llist[i]
          if v == 'itemtype' or v == 'level' then
            value = tonumber(value)
          end
          invdetails[v] = value
        else
          if invdetails[ltype] == nil then
            invdetails[ltype] = {}
          end
          local value = llist[i]
          if v == 'wearloc' or v == 'itemtype' or v == 'level' then
            value = tonumber(value)
          end
          invdetails[ltype][v] = value
        end
      end
    end
  end
end

function builditem(wildcards)
  local item = {}
  item.placestr = wearlocs[tonumber(wildcards.location)] or -1
  item.wearslot = wildcards.location
  item.serial = wildcards.serial
  item.containerid = wildcards.container
  return item
end

delayed_actions = {}

function process_delayed()
  if (not table.getn(delayed_actions)) then
    return
  end

  if (db:open("process_delayed")) then
    db.db:exec("BEGIN TRANSACTION;")
    for k,v in pairs(delayed_actions) do
      checkaction(v.action, v.item)
    end
    delayed_actions = {}
    db.db:exec("COMMIT;")
    db:close("process_delayed")
  end
end

function invmon ( name, line, wildcards )
  phelper:mdebug(line)
  item = builditem(wildcards)
  checkaction(tonumber(  wildcards.action), item)
  --table.insert(delayed_actions, {
  --  action = tonumber(wildcards.action),
  --  item = item
  --})
  --DoAfterSpecial(0.1, "process_delayed()", 12)
end

function invitem( name, line, wildcards)
  local rline = wildcards[1]
  local tstuff = dataparse(rline, 'eqdata')
  olditem = db:getitem(tstuff.serial)
  if olditem then
    for i,v in pairs(layout['eqdata']) do
      if v ~= 'cname' then
        olditem[v] = tstuff[v]
      end
    end
    if olditem.place then
      db:updateitem(olditem)
    end
    event_container_change('Inventory')
  else
    invitemcache[tstuff.serial] = tstuff
  end
end

function emptyline()
  phelper:enabletriggroup("emptyline", false)
  --print('removingall =', removingall)
  --print('wearingall =', wearingall)
  addcontainer('Inventory')
  if removingall or wearingall then
    addcontainer('Worn')
    showoutput('setting removingall and wearingall to false')
    removingall = false
    wearingall = false
    event_wearloc_change('All')
  end
  if gettingall or puttingall then
    if allcontainer ~= -1 then
      db:clearcontainer(allcontainer)
      addcontainer(allcontainer)
      showoutput('setting gettingall and puttingall = false')
      gettingall = false
      puttingall = false
      allcontainer = -1
    end
  end
end

function initinv(char)
  if char.status and char.status.state and tonumber(char.status.state) == 3 and db:getlastrowid('items') <= 0 then
    addcontainer('Worn')
    addcontainer('Inventory')
    initdb = true
  end
end

function getcontainers()
 for i,v in pairs(invdata) do
   if tonumber(v.type) == 11 then
     addcontainer(v.serial)
   end
 end
end

function getitemdetails(id, override, show)
  --print('getitemdetails', type(id), id)
  local titem = db:getitemdetails(id)
  if titem and not override and titem.keywords ~= nil and titem.keywords  ~= "" then
    phelper:processevent('itemchange', titem)
  else
    local titem2 = db:getitem(id)
    if titem2 then
      if show then
        itemstoprint[id] = true
      end
      waitingforid[id] = true
      togglehideoutput("y")
      if titem2.containerid == 'Inventory' then
        EnableTrigger("start_invdetails")
        SendNoEcho('invdetails ' .. tostring(id))
        phelper:enabletriggroup('identify', true)
        Execute('identify ' .. tostring(id))
      elseif titem2.containerid == 'Worn' then
        EnableTrigger("start_invdetails")
        SendNoEcho('invdetails ' .. tostring(id))
        phelper:enabletriggroup('identify', true)
        Execute('identify ' .. tostring(id) .. ' worn')
      else
        putobjectininv(titem2)
        phelper:enabletriggroup('identify', true)
        EnableTrigger("start_invdetails")
        SendNoEcho('invdetails ' .. tostring(id))
        Execute('identify ' .. tostring(id))
        putincontainer[tonumber(titem2.serial)] = titem2.containerid
      end
    end
  end
end

function cmd_refresh(cmddict)
  if db:open('cmd_refresh') then
    db:close('cmd_refresh', true)
    db:open('cmd_refresh')
    local returnval = db.db:exec([[DROP TABLE IF EXISTS items;]])
    --print('returnval', returnval)
    db:close('cmd_refresh', true)
    db:checktable('items')
    local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
    local char = assert (loadstring ('return ' .. gmcparg or ""))()
    initinv(char)
  end
end

function cmd_clean(cmddict)
  db:cleandb()
end

function cmd_close(cmddict)
  db:close('cmd_close', true)
end

function leq_helper(container, lev1, lev2, action)
  local titem = db:getitem(container)
  if titem then
    local fromcontainer = tostring(titem.serial)
    if action == 'put' then
      fromcontainer = 'Inventory'
    end
    lev1 = tonumber(lev1)
    lev2 = tonumber(lev2)
    local sqlcmd = 'SELECT * FROM items WHERE containerid = "' .. fromcontainer .. '" and ' .. 'level = ' ..tostring(lev1)
    if lev1 and lev2 then
      sqlcmd = 'SELECT * FROM items WHERE containerid = "' .. fromcontainer .. '" and ' .. 'level between ' ..tostring(lev1) .. ' and ' .. tostring(lev2)
    end
    --print(sqlcmd)
    if db:open('leq_helper') then
      local stmt = db.db:prepare(sqlcmd)
      if not stmt then
        phelper:plugin_header('l' .. action)
        print('The lookup arguments do not create a valid sql statement')
        db:close()
        return
      end
      for a in stmt:nrows() do
        if tonumber(a.type) ~= 11 then
          Send(action .. ' ' .. tostring(a.serial) .. ' ' .. tostring(titem.serial))
        end
      end
      db:close()
    end
  else
    phelper:plugin_header('l' .. action)
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "I don't know container " .. tostring(container))
  end
end

function cmd_lget(cmddict)
  if cmddict[1] and cmddict[2] and tonumber(cmddict[2]) then
    leq_helper(cmddict[1], cmddict[2], cmddict[3], 'get')
  else
    phelper:plugin_header('lget')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " lget <container> <level1> <level2>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "get all items of a level in a container")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the container, can be serial or an identifier you have assigned to the container")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the lower threshhold level of the items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) argument 3 is the higher threshhold level of the items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  if no higher threshhold then it will only get items that are equal to the lower threshhold")
  end
end

function cmd_lput(cmddict)
  if cmddict[1] and cmddict[2] and tonumber(cmddict[2]) then
    leq_helper(cmddict[1], cmddict[2], cmddict[3], 'put')
  else
    phelper:plugin_header('lput')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " lput <container> <level1> <level2>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "put all items of a level in a container")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the container, can be serial or an identifier you have assigned to the container")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the lower threshhold level of the items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) argument 3 is the higher threshhold level of the items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  if no higher threshhold then it will only put items that are equal to the lower threshhold")
  end
end


function cmd_addid(cmddict)
  if cmddict[1] and cmddict[2] then
    local titem = db:getitem(cmddict[1])
    if titem then
      local changes = db:addidentifier(titem.serial, cmddict[2])
      if changes > 0 then
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Identifier " .. cmddict[2] .. " was added to " .. cmddict[1])
        local invdetails = db:getitemdetails(titem.serial)
        phelper:processevent('itemchange', invdetails)
      else

      end
    else
      phelper:plugin_header('Add Identifier')
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Item " .. cmddict[1] .. " does not exist!")
    end
  else
    phelper:plugin_header('addid')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " addid <serial> <identifier>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "add an identifier to an item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the identifier to add")
  end
end

function cmd_remid(cmddict)
  if cmddict[1] then
    for i,v in ipairs(cmddict) do
      local tchange = db:removeidentifier(v)
      if tchange == 1 then
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Identifier " .. v .. " was removed")
      else
        ColourNote("red", "black", "Identifier " .. v .. " was not found")
      end
    end
  else
    phelper:plugin_header('remid')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " remid <identifier>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "remove an identifier")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the identifier to remove, can be multiple")
  end
end

function print_id(item)
  local ids = strjoin(", ", item.identifier)
  ColourNote("green", "black", string.format('%-15d %-30s %s', item.serial, ids, item.name))
end

function cmd_listid(cmddict)
  local idents = db:getidentifiers()
  ColourNote("green", "black", string.format('%-15s %-30s %s', 'Serial', 'Identifiers', 'Name'))
  ColourNote("green", "black", string.rep('-', 70))
  for i,v in pairs(idents) do
    print_id(v)
  end
  ColourNote("", "", "")
end

function idinv_oniddone()
 if next(getiditems) then
   local nextitem = getiditems[1]
   table.remove(getiditems, 1)
   getitemdetails(nextitem.serial, true)
 else
  phelper:plugin_header('Finished identify of items in inventory')
  phelper:unregisterevent('oniddone', nil, idinv_oniddone)
 end
end

function cmd_idinv(cmddict)
  phelper:plugin_header('Starting identify of items in inventory')
  getiditems = db:getcontainercontents('Inventory')
  --register with oniddone
  phelper:registerevent('oniddone', nil, idinv_oniddone)
  local firstitem = getiditems[1]
  table.remove(getiditems, 1)
  getitemdetails(firstitem.serial, true)
end

function cmd_addnote(cmddict)
  if #cmddict >= 2 then
    local titem = db:getitem(cmddict[1])
    if titem then
      local note = ""
      table.remove(cmddict, 1)
      if #cmddict == 1 then
        note = note .. cmddict[1]
      else
        note = note .. strjoin(' ', cmddict)
      end
      if db:addnote(titem.serial, {note}) then
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Note was added to " .. tostring(titem.serial))
        local invdetails = db:getitemdetails(titem.serial)
        phelper:processevent('itemchange', invdetails)
      end
    end
  else
    phelper:plugin_header('addnote')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " addnote <serial> <note>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "add notes to an item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 note to add")
  end
end

function cmd_remnote(cmddict)
  local titem = db:getitem(cmddict[1])
  table.remove(cmddict, 1)
  if titem and cmddict[1] then
    for i,v in ipairs(cmddict) do
      local tchange = db:removenote(v)
      if tchange == 1 then
        ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Identifier " .. v .. " was removed from " .. tostring(titem.serial))
        local invdetails = db:getitemdetails(titem.serial)
        phelper:processevent('itemchange', invdetails)
      else
        ColourNote("red", "black", "Note " .. v .. " was not found")
      end
    end
  else
    phelper:plugin_header('remnote')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " remnote <serial> <notenum>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "remove notes from an item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 2 is the id of the note, can have more than 1 of these")
  end
end

function cmd_listnote(cmddict)
  if (not cmddict[1]) then
    phelper:plugin_header('listnote')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " listnote <serial> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "list notes for an item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item")
    return
  end
  local titem = db:getitemdetails(cmddict[1])
  if titem then
    if titem.note then
      ColourNote("green", "black", string.format('%4s : %s', 'Num', 'Note'))
      ColourNote("green", "black", string.rep('-', 70))
      for i,v in pairs(titem.note) do
        ColourNote("green", "black", string.format("%4d : %s", i, v))
      end
    else
      ColourNote(RGBColourToName(phelper.plugin_colour), "black", "The item has no notes")
    end
  end
end

function cmd_getcolourname(cmddict)
  if cmddict[1] and tonumber(cmddict[1]) then
    local sqlcmd = 'SELECT * FROM items WHERE serial=' .. cmddict[1]
    if db:open('cmd_getcolourname') then
      local stmt = db.db:prepare(sqlcmd)
      if not stmt then
        db:close('cmd_getcolourname')
        return
      end
      local item = {}
      for a in stmt:nrows() do
        item = a.cname
      end
      db:close('cmd_getcolourname')
      ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%s: %s", cmddict[1], item))
    end
    ColourNote("", "", "")
  else
    phelper:plugin_header('getcolourname')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " getcolourname <serial> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "get the coloured name of an item")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item")
  end
end

function print_item(item)
  Hyperlink(phelper.cmd .. " getitem " .. tostring(item.serial), string.format('%-15s', tostring(item.serial)), "Lookup details", 0xE16941, GetInfo(271), false)
  ColourTell(RGBColourToName(var.plugin_colour), "black", string.format(" %-15s %-5s %-5s ",
                         tostring(item.containerid), tostring(item.level), tostring(item.score or '')))
  TextToColourTell(item.cname)
  ColourNote("", "", "")
end

function print_itemheader()
  ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-15s %-15s %-5s %-5s %s",
                         'Serial', 'Container', 'Level', 'Score', 'Name'))
  ColourNote(RGBColourToName(var.plugin_colour), "black", '---------------------------------------------------------------')
end

function cmd_eqlookup(cmddict)
  --print('eqlookup')
  --tprint(cmddict)
  if cmddict[1] then
    local sqllu = strjoin(' ', cmddict)
    --local sqlcmd = 'SELECT * FROM items WHERE ' .. cmddict.args .. ' LEFT JOIN on items.serial = itemdetails.serial'
    --local sqlcmd = 'SELECT * FROM items LEFT JOIN itemdetails on items.serial = itemdetails.serial WHERE ' .. cmddict.args
    --local sqlcmd = 'SELECT items.serial, containerid, shortflags, items.name, items.cname, score, flags FROM items LEFT JOIN itemdetails on items.serial = itemdetails.serial WHERE ' .. cmddict.args'
    local sqlcmd = 'SELECT * FROM items WHERE ' .. cmddict.args
    --print(sqlcmd)
    if db:open('cmd_eqlookup') then
      local stmt = db.db:prepare(sqlcmd)
      if not stmt then
        phelper:plugin_header('EQ Lookup')
        print('The lookup arguments do not create a valid sql statement')
        db:close()
        return
      end
      print_itemheader()
      for a in stmt:nrows() do
        local titem = db:getitemdetails(a.serial)
        if titem then
          a.score = titem.score
        end
        print_item(a)
      end
      db:close()
    end
    ColourNote("", "", "")
  else
    phelper:plugin_header('lu')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " lu <statement> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "lookup items in the database")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 sql statement to use for lookups")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Examples: 'level between 1 and 100' - all items between levels 1 and 100")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "          'containerid = \"Worn\"' - all worn items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "          'type = 5' - all weapons")
  end
end

function print_itemid(item)
  local fitem = formatitem(item)
  for i,v in ipairs(fitem) do
    TextToColourTell(v)
    ColourNote("", "", "")
  end
  ColourNote("", "", "")
end

function cmd_eqgetitem(cmddict)
  --print('showitem')
  --tprint(cmddict)
  if cmddict[1] == help or not cmddict[1] then
    phelper:plugin_header('getitem')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " getitem <serial> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "get item details from the database")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item, can be multipe of these arguments")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(optional) if the keyword 'nodb' is used, the item will be reidentified from the mud")
    return
  end
  local nodb = false
  if not cmddict.fromid and string.match(cmddict.line, '.*nodb.*') then
    --print('setting nodb to true')
    nodb = true
  end
  if cmddict[1] then
    for i,v in ipairs(cmddict) do
      if v ~= 'nodb' then
        local titem = db:getitemdetails(v)
        if titem and titem.keywords and not nodb then
          print_itemid(titem)
        else
          local nitem = db:getitem(v)
          if nitem or nodb then
            --itemstoprint[nitem.serial] = true
            --waitingforid[nitem.serial] = true
            --print('getting an item')
            getitemdetails(nitem.serial, nodb, true)
          else
            ColourNote(RGBColourToName(var.plugin_colour), "black", "You do not have that item")
          end
        end
      end
    end
  end
end

function cmd_eqcomp(cmddict)
  if cmddict[1] then
    local tstyle = string.format('%-15s', 'Name') .. string.format(' %-5s ', 'Score') .. formatstatsheader()
    TextToColourTell(tstyle)
    ColourNote("", "", "")
    ColourNote("", "", string.rep('-', 89))
    for i,v in ipairs(cmddict) do
      local titem = db:getitemdetails(v)
      local tstyle = string.format('%-15s', string.sub(titem.name, 1, 15)) .. string.format(' @C%-5s@w ', titem.score)
      tstyle = tstyle .. formatstats(titem.statmod or {})
      TextToColourTell(tstyle)
      ColourNote("", "", "")
    end
  else
    phelper:plugin_header('comp')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " comp <serial>")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "compare items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the serial number of the item, can be multiple")
  end
  ColourNote("", "", "")
end

function cmd_translate(cmddict)
  --print('eqlookup')
  --tprint(cmddict)
  if cmddict[1] then
    local ttype = cmddict[1]:lower()
    if ttype == 'wear' or ttype == 'wearlocs' then
      ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-4s %-s", 'Num', 'String'))
      for i=0,#wearlocs do
        ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-4s %-s", i, wearlocs[i]))
      end
    elseif ttype == 'objecttypes' or ttype == 'object' then
      ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-4s %-s", 'Num', 'String'))
      for i,v in ipairs(objecttypes) do
        ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-4s %-s", i, v))
      end
    end
  else
    phelper:plugin_header('translate')
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "Usage: " .. phelper.cmd .. " translate <info> ")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "translate flags for items")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "(required) argument 1 is the type of info to translate")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", "  The following flags can be translated")
    ColourNote(RGBColourToName(phelper.plugin_colour), "black", '    wearlocs (wear) and objecttypes (object)')
  end
end

function checkaction(action, item, afterwait)
  if action == 1 and removingall == false then
    timer_start('EQdb:action1')
    -- item removed
    --print('action 1')
    local oldwearslot = item.wearslot
    item.wearslot = -1
    db:moveitem(item, 'Inventory')
    event_container_change('Inventory')
    event_container_change('Worn')
    event_wearloc_change(oldwearslot, 1, item)
    timer_end('EQdb:action1')
  elseif action == 1 and removingall then
     db:clearcontainer('Worn')
     phelper:enabletriggroup("emptyline", true)
  elseif action == 2 and wearingall == false then
    timer_start('EQdb:action2')
    -- item worn
    --print('action 2')
    local olditem = db:getitem(item.serial)
    if olditem then
      db:wearitem(olditem, item.wearslot)
      event_container_change('Inventory')
      event_container_change('Worn')
    else
      showoutput('action 2 setting removeall true')
      removingall = true
      phelper:enabletriggroup("emptyline", true)
    end
    event_wearloc_change(item.wearslot, 2, item)
    timer_end('EQdb:action2')
  elseif action == 2 and wearingall then
   --print('enabling emptyline trigger')
   phelper:enabletriggroup("emptyline", true)
  elseif action == 3 then
    -- dropped, sold
    --print('action 3')
    phelper:enabletriggroup("emptyline", true)
  elseif action == 4 then
    -- added (received, picked up)
    --print('action 4')
    phelper:enabletriggroup("emptyline", true)
    --db:additems({item})
  elseif action == 5 and gettingall == false then
    timer_start('EQdb:action5')
    -- removed from container
    --print('action 5')
    local olditem = db:getitem(item.serial)
    db:moveitem(item, 'Inventory')
    event_container_change('Inventory')
    phelper:processevent('itemchange', db:getitem(item.serial))
    if olditem then
      event_container_change(olditem.containerid)
    end
    timer_end('EQdb:action5')
  elseif action == 5 and gettingall == true then
    db:clearcontainer('Inventory')
    showoutput('action: 5, gettingall: ' .. tostring(gettingall))
    allcontainer = item.containerid
    phelper:enabletriggroup("emptyline", true)
  elseif action == 6 and puttingall == false then
    timer_start('EQdb:action6')
    -- put into container
    --print('action 6')
    local olditem = db:getitem(item.serial)
    db:moveitem(item, item.containerid)
    event_container_change('Inventory')
    event_container_change(item.containerid)
    timer_end('EQdb:action6')
  elseif action == 6 and puttingall == true then
    db:clearcontainer('Inventory')
    showoutput('action: 6, puttingall: ' ..  tostring(puttingall))
    allcontainer = item.containerid
    phelper:enabletriggroup("emptyline", true)
  elseif action == 7 then
    -- consumed
    --print('action 7')
    db:removeitems({item})
    event_container_change('Inventory')
  end
end

function toggleoutput(tflag)
  local trigstoupdate = {"invmon", "invitem", "start_invdetails", "multi_line_invdetails", "start_eqdata",
                    "multi_line_eqdata" , "start_invdata", "multi_line_invdata", "badinvdata1",
                    "badinvdata2", "badinvdata3", "emptyline"}
  for i,v in ipairs(trigstoupdate) do
    if tflag then
      SetTriggerOption(v, "omit_from_output", "n");
      silent = false
    else
      SetTriggerOption(v, "omit_from_output", "y");
      silent = true
    end
  end
end

function afterdebug()
  toggleoutput(phelper.tdebug)
end

function aftershowset()
  toggleoutput(phelper.showoutput)
end

function parse_inv_args(args)
  local extras = {}
  extras['levels'] = {}
  extras['otype'] = {}
  extras['name'] = {}
  extras['sort'] = {}
  extras['group'] = phelper.groupitems
  extras['flags'] = true
  extras['serial'] = false
  extras['score'] = false
  if not args then
    return extras
  end
  for i,v in ipairs(args) do
    if objecttypesrev[v] then
      table.insert(extras['otype'], v)
    elseif tonumber(v) then
      table.insert(extras['levels'], v)
    elseif v == '-g' then
      extras['group'] = false
    elseif v == '+g' then
      extras['group'] = true
    elseif v == '+sc' then
      extras['score'] = true
    elseif v == '+se' then
      extras['serial'] = true
    elseif v == '-f' then
      extras['flags'] = false
    elseif string.find(v, '-') then
      local field = string.sub(v, 2, #v)
      if db.tables['items'].columnsbykeys[field] then
        extras['sort']['dir'] = 'DESC'
        extras['sort']['field'] = string.sub(v, 2, #v)
      end
    elseif string.find(v, '+') then
      local field = string.sub(v, 2, #v)
      if db.tables['items'].columnsbykeys[field] then
        extras['sort']['dir'] = 'ASC'
        extras['sort']['field'] = string.sub(v, 2, #v)
      end
    else
      table.insert(extras['name'], v)
    end
  end
  --tprint(extras)
  return extras
end

--default_filter = {filtercol='place', reverse=false}
function show_container(container, args)

  local extras = parse_inv_args(args)
  extras['table'] = 'items'
  extras['containerid'] = container
  extras['sql'] = db:buildsql(extras)
  groupitems = extras['group']
  local header = ''
  local items = {}
  if container == 'Worn' then
    header, items = buildwornoutput(db, container, extras)
    ColourNote("white", "", "You are using:")
  else
    extras['serial'] = true
    header, items = buildcontainer(db, container, extras)
  end
  TextToColourTell(header)
  ColourNote("", "", "")
  ColourNote("blue", "", string.rep('-', 80))
  for i,v in ipairs(items) do
    TextToColourTell(v)
    ColourNote("", "", "")
  end
  ColourNote("", "", "")
end
]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
  if id == "aaafc15678afa22343c5a327" then
    if msg == 15 then
      -- idle for more than 15 minutes
      -- start going through the cache and updating them (need a coroutine)
    elseif msg == 0 then
      -- no longer idle
      -- stop the coroutine
    end
  end
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()
    end
  end
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper
  if IsPluginInstalled("aaa66caed92ffc6146964abc") then
    ColourNote("red", "black", "eqLookup will nolonger be needed, please use " .. phelper.cmd .. " instead")
    DoAfterSpecial(2, "plugins unload aaa66caed92ffc6146964abc", 10)
    return
  end

  if IsPluginInstalled("aaa7dc9ed92ffc6146964abc") then
    ColourNote("red", "black", "broadcast_invmon will nolonger be needed")
    DoAfterSpecial(2, "plugins unload aaa7dc9ed92ffc6146964abc", 10)
    return
  end

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")
  ldplugin ("broadcast_idle", "aaabe45678afa22343c5a327")

  if IsConnected() then
    local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
    char = assert (loadstring ('return ' .. gmcparg or ""))()
    initinv(char)
  else
    --print('OnPluginConnect: setting wearingall to true')
    wearingall = true
  end

  dbbackup()
  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

function fixarg(arg)
  if string.find(arg, '[%.]') or arg == 'all' then
    return arg
  elseif string.find(arg, ' ') then
    return "'" .. arg .. "'"
  else
    return arg
  end
end

P, V, Cg, Ct, Cc, S, R, C, Cf, Cb = lpeg.P, lpeg.V, lpeg.Cg, lpeg.Ct, lpeg.Cc, lpeg.S, lpeg.R, lpeg.C, lpeg.Cf, lpeg.Cb

wearpeg = (P("wea") * -P(1)) + (P("wear") * -P(1))
getpeg = (P("g") * -P(1)) + (P("ge") * -P(1)) + (P("get") * -P(1))
putpeg = (P("pu") * -P(1)) + (P("put") * -P(1))
lookpeg = (P("l") * -P(1)) + (P("lo") * -P(1)) + (P("loo") * -P(1)) + (P("look") * -P(1))
removepeg = (P("re") * -P(1)) + (P("rem") * -P(1)) + (P("remo") * -P(1)) + (P("remov") * -P(1))
identpeg = (P("id") * -P(1)) + (P("ide") * -P(1)) + (P("iden") * -P(1)) + (P("ident") * -P(1)) + (P("identi") * -P(1)) + (P("identif") * -P(1))
inventorypeg = (P("i") * -P(1)) + (P("in") * -P(1)) + (P("inv") * -P(1)) + (P("inve") * -P(1)) + (P("inven") * -P(1)) + (P("invent") * -P(1)) + (P("invento") * -P(1))  + (P("inventor") * -P(1))
eqpeg = (P("eq") * -P(1)) + (P("equ") * -P(1)) + (P("equi") * -P(1)) + (P("equip") * -P(1)) + (P("equipm") * -P(1)) + (P("equipme") * -P(1)) + (P("equipmen") * -P(1))
alldotpeg = (P("all") * P(".") * P(1)^1) + (P("all") * P(".") * -P(1))
inpeg = (P("i") * -P(1)) + (P("in") * -P(1))

function OnPluginSend (sText)
  if char and char.status and tonumber(char.status.state) == 5 then
    return true
  end
  showoutput('Original Cmd: ' .. sText)
  timer_start('eqDB:OnPluginSend')
  local cmd = parse_cmdline(string.lower(sText))
  if not cmd[1] then
    cmd[1] = ""
  end

  local getp = false
  local putp = false
  local removep = false
  local wearp = false
  local lookp = false
  local identp = false
  local inventoryp = false
  local inp = false
  local eqp = false
  local alldotp = false

  if lpeg.match(getpeg, string.lower(cmd[1])) ~= nil then
    --print('setting getp')
    getp = true
    if cmd[2] and lpeg.match(alldotpeg, string.lower(cmd[2])) ~= nil then
      --print('setting allp')
      alldotp = true
    end
  elseif lpeg.match(putpeg, string.lower(cmd[1])) ~= nil then
    --print('setting putp')
    putp = true
    if cmd[2] and lpeg.match(alldotpeg, string.lower(cmd[2])) ~= nil then
      --print('setting allp')
      alldotp = true
    end
  elseif lpeg.match(lookpeg, string.lower(cmd[1])) ~= nil then
    --print('setting lookp')
    lookp = true
  elseif lpeg.match(inventorypeg, string.lower(cmd[1])) ~= nil then
    --print('setting inventoryp')
    inventoryp = true
  elseif lpeg.match(eqpeg, string.lower(cmd[1])) ~= nil then
    --print('setting eqp')
    eqp = true
  elseif lpeg.match(removepeg, string.lower(cmd[1])) ~= nil then
    --print('setting removep')
    removep = true
  elseif lpeg.match(wearpeg, string.lower(cmd[1])) ~= nil then
    --print('setting wearp')
    wearp = true
  elseif lpeg.match(identpeg, string.lower(cmd[1])) ~= nil then
    --print('setting ident')
    identp = true
  end

  if wearp and cmd[2] == 'all' then
    showoutput('wearingall = true')
    wearingall = true
  elseif removep and cmd[2] == 'all' then
    showoutput('removingall = true')
    removingall = true
  elseif getp and alldotp then
    showoutput('gettingall = true')
    gettingall = true
  elseif putp and alldotp then
    showoutput('puttingall = true')
    puttingall = true
  end

  local changed = false
  local ncmd = cmd[1]
  local item = cmd[2]
  local cont = cmd[3]

  if inventoryp and item ~= 'filter' and phelper.overloadinventory then
    table.remove(cmd, 1)
    --print('overloading inventory')
    if cmd[1] == 'help' then
      Note("")
      Note(GetPluginInfo (GetPluginID (), 3))
      Note("")
    else
      show_container('Inventory', cmd)
    end
    return false
  elseif eqp and phelper.overloadinventory then
    --print('overloading equipment')
    table.remove(cmd, 1)
    if cmd[1] == 'help' then
      Note("")
      Note(GetPluginInfo (GetPluginID (), 3))
      Note("")
    else
      show_container('Worn', cmd)
    end
    return false
  -- wear and remove
  elseif wearp or removep then
    local nitem = db:getitem(item)

    if item and nitem and nitem.serial ~= tonumber(item) then
      ncmd = ncmd .. ' ' .. tostring(nitem.serial)
      changed = true
      if cmd[3] then
        ncmd = ncmd .. ' ' .. fixarg(tostring(ncmd[3]))
      end
    end

  -- identify
  elseif identp then
    local nitem = db:getitem(item)

    if item and nitem and phelper.overloadid and not waitingforid[nitem.serial] then
        cmd_eqgetitem({[1]=nitem.serial,fromid=true})
        return false
    elseif item and nitem and nitem.serial ~= tonumber(item) then
      ncmd = ncmd .. ' ' .. tostring(nitem.serial)
      changed = true
    end

  -- look
  elseif lookp then
    if lpeg.match(inpeg, string.lower(tostring(item))) then
      inp = true
      ncmd = ncmd .. ' ' .. 'in'
      item = cmd[3]
    end
    local nitem = db:getitem(item)

    if nitem and inp and phelper.overloadinventory and string.lower(cmd[1]) ~= 'look' then
      local tstuff = copytable.shallow(cmd)
      table.remove(tstuff, 3)
      table.remove(tstuff, 2)
      table.remove(tstuff, 1)
      show_container(nitem.serial, tstuff)
      return false
    end

    if item and nitem and nitem.serial ~= tonumber(item) then
      ncmd = ncmd .. ' ' .. tostring(nitem.serial)
      changed = true
    end

  -- get and put
  elseif getp or putp then

    if item == 'all.' then
      item = 'all.' .. fixarg(cmd[3])
      cont = cmd[4]

      if cont then
        local citem = db:getitem(cont)
        if cont and citem and citem.serial ~= tonumber(cont) then
          changed = true
          ncmd = ncmd .. ' ' .. tostring(item) .. ' ' .. tostring(citem.serial)
        end
      end
    else
      local nitem = db:getitem(item, true)
      local citem = nil
      if cont then
        citem = db:getitem(cont)
      end
      if item and nitem and nitem.serial ~= tonumber(item) then
        ncmd = ncmd .. ' ' .. tostring(nitem.serial)
        changed = true
      elseif item and fixarg(item) ~= item then
        ncmd = ncmd .. ' ' .. fixarg(item)
        changed = true
      else
        ncmd = ncmd .. ' ' .. tostring(item)
      end
      if citem and citem.serial ~= tonumber(cont) then
        ncmd = ncmd .. ' ' .. tostring(citem.serial)
        changed = true
      elseif cont and fixarg(cont) ~= cont then
        ncmd = ncmd .. ' ' .. fixarg(cont)
        changed = true
      elseif nitem and nitem.containerid ~= 'Worn' and nitem.containerid ~= 'Inventory' then
        ncmd = ncmd .. ' ' .. tostring(nitem.containerid)
        changed = true
      else
        ncmd = ncmd .. ' ' .. tostring(cont)
      end
    end
    timer_end('eqDB:OnPluginSend')
  end
  if changed and ncmd ~= string.lower(sText) then
    showoutput('I would send changed: ' ..  ncmd)
    SendNoEcho(ncmd)
    return false
  end
  timer_end('eqDB:OnPluginSend')
  showoutput('I would send original: ' .. sText)
  return true
end
]]>
</script>

<script>
<![CDATA[

phelper:set_default('plugin_colour', 'orange')
phelper:set_default('cmd', 'eqdb')

phelper:add_cmd('lu', {func=cmd_eqlookup, help="lookup stuff in the db", sortgroup='Obtaining information on items', prio = 30})
phelper:add_cmd('getitem', {func=cmd_eqgetitem, help="print info on item with id", sortgroup='Obtaining information on items', prio = 31})
phelper:add_cmd('comp', {func=cmd_eqcomp, help="compare items,args = list of serials", sortgroup='Obtaining information on items', prio = 32})
phelper:add_cmd('getcolourname', {func=cmd_getcolourname, help="return the name of the item with embedded color codes", sortgroup='Obtaining information on items', prio = 33})

phelper:add_cmd('addid', {func=cmd_addid, help="add an identifier to an item", sortgroup='Manipulating identifiers on items', prio = 34})
phelper:add_cmd('remid', {func=cmd_remid, help="remove an identifier from an item", sortgroup='Manipulating identifiers on items', prio = 35})
phelper:add_cmd('listid', {func=cmd_listid, help="list items with identifiers", sortgroup='Manipulating identifiers on items', prio = 36})

phelper:add_cmd('addnote', {func=cmd_addnote, help="add a note to an item, first arg is serial, the rest will be the note", sortgroup='Manipulating notes on items', prio = 37})
phelper:add_cmd('remnote', {func=cmd_remnote, help="remove a note from an item, only arg is note number", sortgroup='Manipulating notes on items', prio = 38})
phelper:add_cmd('listnote', {func=cmd_listnote, help="list notes for an item, only arg is item serial", sortgroup='Manipulating notes on items', prio = 39})

phelper:add_cmd('lget', {func=cmd_lget, help="get items from container between level1 and level2", sortgroup='Manipulating items', prio = 40})
phelper:add_cmd('lput', {func=cmd_lput, help="put items in container between level1 and level2", sortgroup='Manipulating items', prio = 41})

phelper:add_cmd('clean', {func=cmd_clean, help="clean the db of stale items", sortgroup='Database commands', prio = 42})
phelper:add_cmd('idinv', {func=cmd_idinv, help="identify all items in inventory (does not include Worn or items in bags)", sortgroup='Database commands', prio = 43})
phelper:add_cmd('refresh', {func=cmd_refresh, help="refresh the db", sortgroup='Database commands', prio = 44})
phelper:add_cmd('close', {func=cmd_close, help="close the db", sortgroup='Database commands', prio = 45})

phelper:add_cmd('translate', {func=cmd_translate, help="show what strings mean for certain types of flags", sortgroup='Misc', prio = 42})

phelper:add_setting('showoutput', {help="show tags", type="bool", default=verify_bool(false), after=aftershowset})
phelper:add_setting('overloadid', {help="overload the identify command to use getitem", type="bool", default=verify_bool(false)})
phelper:add_setting('overloadinventory', {help="overload the inventory, equipment and 'look in' commands", type="bool", default=verify_bool(false)})
phelper:add_setting('groupitems', {help="groupitems that are the same when inventory is overloaded", type="bool", default=verify_bool(true)})

phelper:enable()
]]>
</script>
</muclient>
