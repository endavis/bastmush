<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- $Id$ -->
<muclient>
<plugin
   name="xBroadcast_GQ"
   author="Bast"
   id="aaa77f81c5408278ccda7100"
   language="Lua"
   purpose="Broadcasts when anything happens related to a gq"
   save_state="y"
   date_written="2009-02-21 1:10:01"
   requires="4.73"
   version="6.1"
   >

<description trim="y">
<![CDATA[
[FOR PLUGIN AUTHORS ONLY]

Broadcasts when anything happens in a gquest
Broadcasts
   1 - gquest declared
   2 - gquest joined
   3 - Mob list, get mobs and loadstring it
       mobs = { 1 = {name = 'Some name', location = 'Some location', clean = 'A name with some stuff removed', num=number},
              2 = {name = 'Another name', location = 'Another location', clean = 'Another name with some stuff removed', num=number}, }
       It will be resent when a mob is killed and will be nil when a gquest is not active
   4 - rewards get gq_info and loadstring it
       see below
   5 - gquest quit
   6 - gquest over
   7 - gquest available
   8 - no gquests available

Example
  function OnPluginBroadcast (msg, id, name, text)
    if id == "aaa77f81c5408278ccda7100" and msg == 3 then
      local pvar = GetPluginVariable(  "aaa77f81c5408278ccda7100", "mobs" )

      -- get the mobs
      loadstring( pvar )()
      gq_mobs = mobs
    end
  end

gq_info = {}
  gq_info.starttime = 1241394128
  gq_info.mobs = {}
    gq_info.mobs[1] = {}
      gq_info.mobs[1].num = "1"
      gq_info.mobs[1].location = "Castle Vlad-Shamir"
      gq_info.mobs[1].name = "demon cook"
      gq_info.mobs[1].clean = "demon cook"
    gq_info.mobs[2] = {}
      gq_info.mobs[2].num = "1"
      gq_info.mobs[2].location = "Castle Vlad-Shamir"
      gq_info.mobs[2].name = "an insane demon"
      gq_info.mobs[2].clean = "an insane demon"
    gq_info.mobs[3] = {}
      gq_info.mobs[3].num = "1"
      gq_info.mobs[3].location = "Diamond Soul Revelation"
      gq_info.mobs[3].name = "Marie Antoinette"
      gq_info.mobs[3].clean = "marie antoinette"
    gq_info.mobs[4] = {}
      gq_info.mobs[4].num = "1"
      gq_info.mobs[4].location = "Realm of Deneria"
      gq_info.mobs[4].name = "Zombie"
      gq_info.mobs[4].clean = "zombie"
    gq_info.mobs[5] = {}
      gq_info.mobs[5].num = "1"
      gq_info.mobs[5].location = "ST:TNG"
      gq_info.mobs[5].name = "a loose crystal of the entity"
      gq_info.mobs[5].clean = "a loose crystal of the entity"
    gq_info.mobs[6] = {}
      gq_info.mobs[6].num = "1"
      gq_info.mobs[6].location = "Star Wars"
      gq_info.mobs[6].name = "a transporter crewman"
      gq_info.mobs[6].clean = "a transporter crewman"
    gq_info.mobs[7] = {}
      gq_info.mobs[7].num = "1"
      gq_info.mobs[7].location = "The Flying Citadel"
      gq_info.mobs[7].name = "Blandine, archangel of dreams"
      gq_info.mobs[7].clean = "blandine archangel of dreams"
    gq_info.mobs[8] = {}
      gq_info.mobs[8].num = "1"
      gq_info.mobs[8].location = "The Goblin Fortress"
      gq_info.mobs[8].name = "Orchid the pilferer"
      gq_info.mobs[8].clean = "orchid the pilferer"
    gq_info.mobs[9] = {}
      gq_info.mobs[9].num = "1"
      gq_info.mobs[9].location = "The Imperial City of Reme"
      gq_info.mobs[9].name = "a leper"
      gq_info.mobs[9].clean = "a leper"
  gq_info.qpmobs = 0
  gq_info.won = 0
  gq_info.length = 0
  gq_info.finishtime = 1241394624
  gq_info.pracs = 0
  gq_info.gold = 0
  gq_info.tp = 0
  gq_info.level = "69"
  gq_info.trains = 0
  gq_info.qp = 0
]]>
</description>

<!--
Global Quest: Global quest # 459558 has been declared for levels 141 to 155.

You have now joined the quest. See 'help gquest' for available commands.

The global quest has not yet started.

Global Quest: The global quest for levels 117 to 130 has now started.
Global Quest: Use 'gquest info' to see the targets.

You still have to kill 2 * some singing mice (Faerie Tales II)
You still have to kill 1 * Akiya (Masquerade Island)
You still have to kill 1 * the train conductor (ST:TNG)
You still have to kill 1 * a slime (Sanctity of Eternal Damnation)
You still have to kill 2 * a blue and green cockatoo (The Amazon Nation)
You still have to kill 2 * a chaosian citizen (The Courts of Chaos)
You still have to kill 1 * a brawling pirate (The Misty Shores of Yarr)
You still have to kill 2 * a deckscrubber (The Misty Shores of Yarr)
You still have to kill 1 * a pirate sorting the treasure (The Misty Shores of Yarr)
You still have to kill 1 * A cleaning maid (Verdure Estate)


Congratulations, that was one of the GLOBAL QUEST mobs!
3 quest points awarded.

You were the first to complete this quest!
Reward of 4 practice sessions added.
Reward of 12100 gold coins added.
Reward of 13 quest points added.
Reward of 1 trivia point added.
You may win 2 more gquests at this level.
Global Quest: The global quest has been won by Bast - 13th win.

You are not on a global quest.

Global Quest: The global quest has been won by Bast - 170th win.
Global Quest: The global quest will go into extended time for 3 more minutes.
Global Quest: No active players remaining, global quest is now over.

-->
</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>

  <trigger
   enabled="y"
   match="^Global Quest: Global quest \# *(?&lt;gqnum&gt;\d+) has been declared for levels (.*) to (.*)\.$"
   name="gqdeclared"
   script="gqdeclared"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>


 <trigger
   enabled="y"
   match="^You have now joined Global Quest \# *(?&lt;gqnum&gt;\d+)\. .*$"
   name="gqjoin"
   script="gqjoin"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>

 <trigger
   enabled="y"
   match="^Global Quest: Global quest \# *(?&lt;gqnum&gt;\d+) .* has now started.$"
   name="gqstarted"
   script="gqstarted"
   sequence="100"
   regexp="y"
   omit_from_output="n"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^Global Quest: Global quest \# *(?&lt;gqnum&gt;\d+) has been cancelled due to lack of (activity|participants)\.$"
   name="gqcancelled"
   script="gqcancelled"
   sequence="101"
   regexp="y"
  >
  </trigger>

 <trigger
   enabled="y"
   match="^You are no longer part of Global Quest \# *(?&lt;gqnum&gt;\d+) and will be unable to rejoin.$"
   sequence="100"
   name="gqquit"
   script="gqquit"
   regexp="y"
  >
  </trigger>

  <trigger
   enabled="n"
   match="You are not in a global quest."
   name="gqnone"
   script="notstarted"
   sequence="100"
   group="gqcheck"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^You still have to kill(?&lt;num&gt;[ \d]*) \* (?&lt;name&gt;.*?) \((?&lt;location&gt;.*?)(?&lt;dead&gt; - Dead|)\)(|\.)$"
   name="gqitem"
   script="gqitem"
   sequence="100"
   regexp="y"
   group="gqcheck"
   omit_from_output="y"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^Global Quest \# *(?&lt;gqnum&gt;\d+) has not yet started."
   name="notstarted"
   script="notstarted"
   group="gqcheck"
   regexp="y"
   sequence="101"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^You may win (.*) more gquests? at this level\.$"
   name="gqwins"
   script="gqwins"
   group="gqcheck"
   regexp="y"
   sequence="101"
  >
  </trigger>

  <trigger
   enabled="n"
   match="^(\s*)Reward of (?&lt;amount&gt;\d+) (?&lt;type&gt;.+) (.+) added\.$"
   sequence="100"
   name="gqreward"
   script="gqreward"
   group="gqrew"
   regexp="y"
  >
  </trigger>

 <trigger
   enabled="n"
   match="Congratulations, that was one of the GLOBAL QUEST mobs!"
   send_to="10"
   sequence="100"
   name="gqmobdead"
   script="gqmobdead"
   group="gqin"
  >
  </trigger>

 <trigger
   enabled="n"
   match="You were the first to complete this quest!"
   sequence="100"
   name="gqwon"
   script="gqwon"
   group="gqin"
  >
  </trigger>

 <trigger
   enabled="n"
   match="^Global Quest: Global Quest \# *(?&lt;gqnum&gt;\d+) has been won by (?&lt;winner&gt;.*) - (.*) win\.$"
   sequence="100"
   name="gqwonannounce"
   script="gqwonannounce"
   group="gqin"
   regexp="y"
  >
  </trigger>

 <trigger
   enabled="n"
   match="^You have finished this global quest.$"
   sequence="100"
   name="gqextfin"
   script="gqextfin"
   group="gqin"
   regexp="y"
  >
  </trigger>

 <trigger
   enabled="y"
   match="^INFO: New post \#(?&lt;bdnum&gt;.*) in forum Gquest from Aardwolf Subj: Lvl (?&lt;low&gt;.*) to (?&lt;high&gt;.*) - Global quest \# *(?&lt;gqnum&gt;\d+)$"
   sequence="100"
   name="gqnote"
   script="gqnote"
   regexp="y"
  >
  </trigger>

 <trigger
   enabled="y"
   match="^You have reached the maximum (.*) kills for which you can earn quest points this level\.$"
   sequence="100"
   name="gqmaxkills"
   script="gqmaxkills"
   regexp="y"
  >
  </trigger>

</triggers>


<!--  Aliases  -->

<aliases>
  <alias
   name="gq_check"
   script="gqcheck"
   match="^(gq|gquest) check$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  <send>gq check</send>
  </alias>

</aliases>


<!--  Script  -->

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "check"
require "pluginhelper"
require "verify"
require "copytable"
require "ldplugin"

rewardtable = {
  quest = 'qp',
  training = 'trains',
  gold = 'gold',
  trivia = 'tp',
  practice = 'pracs',
  }


function cleanname(name)
  return string.lower(string.gsub(name, ",", ""))
end

linecount = 0

mobsleft = {}
gq_info = {}
gqsdeclared = {}
gqsstarted = {}
enemy = ""
charname = ""

function gqnew()
  phelper:mdebug('creating new gq')
  gq_info = {}
  gq_info['mobs'] = {}
  gq_info['trains'] = 0
  gq_info['pracs'] = 0
  gq_info['gold'] = 0
  gq_info['tp'] = 0
  gq_info['qp'] = 0
  gq_info['qpmobs'] = 0
  gq_info['level'] =  curlevel
  gq_info['starttime'] = GetInfo(304)
  gq_info['finishtime'] = 0
  gq_info['length'] = 0
  gq_info['won'] = 0
  gq_info['completed'] = 0
  phelper:set('maxkills', 'default', {silent=true})
  SaveState()
end

function gqdeclared (name, line, wildcards)
  phelper:mdebug('gqdeclared')
  gqsdeclared[verify_number(wildcards.gqnum)] = true
  checkgqavailable()
  raisegq(1)
end

function gqjoin (name, line, wildcards)
  phelper:mdebug('gqjoin')
  gqnew()
  phelper:set('joined', wildcards.gqnum, {silent=true})
  mobsleft = {}

  if gqsstarted[verify_number(wildcards.gqnum)] then
    gqstarted(name, line, wildcards)
  elseif not (gqsdeclared[verify_number(wildcards.gqnum)]) then
    gqsdeclared[verify_number(wildcards.gqnum)] = true
    gqstarted(name, line, wildcards)
  end
  raisegq(2)

end

function gqstarted (name, line, wildcards)
  phelper:mdebug('gqstarted')

  if not (gqsstarted[verify_number(wildcards.gqnum)]) then
    gqsstarted[verify_number(wildcards.gqnum)] = true
    checkgqavailable()
  end
  if phelper.joined == verify_number(wildcards.gqnum) then
    gq_info['starttime'] = GetInfo(304)
    phelper:enabletriggroup("gqin", true)
    Execute("gq check")
  end

end

function gqcancelled(name, line, wildcards)
  phelper:mdebug('gqcancelled')
  if verify_number(wildcards.gqnum) == phelper.joined then
    raisegq(6)
    if gq_info['qpmobs'] > 0 then
      gq_info['finishtime'] = GetInfo(304)
      raisegq(4, 'gq_info', gq_info)
    end
    gqreset(phelper.joined)

  else
    if gqsdeclared[verify_number(wildcards.gqnum)] then
      gqsdeclared[verify_number(wildcards.gqnum)] = nil
    end
    if gqsstarted[verify_number(wildcards.gqnum)] then
      gqsstarted[verify_number(wildcards.gqnum)] = nil
    end
    checkgqavailable()
  end
end

function gqitem(name, line, wildcards)
  phelper:mdebug('gqitem')
  name = wildcards.name
  location = wildcards.location
  num = trim(wildcards.num)
  if not name or not location or not num then
    print("error parsing line: ", line)
    tprint(wildcards)
  else
    table.insert(mobsleft, {name=name, location=location, clean=cleanname(name), num=num})
  end
end -- campaign_item

function notstarted(name, line, wildcards)
  phelper:mdebug('notstarted')
  phelper:enabletriggroup("gqcheck", false)
  phelper:enabletriggroup("gqin", false)
end

function gqwins(name, line, wildcards)
  phelper:mdebug('gqwins')
  if not next(gq_info['mobs']) then
    gq_info['mobs'] = copytable.deep(mobsleft)
    SaveState()
  end
  phelper:enabletriggroup("gqcheck", false)
  raisegq(3, 'mobs', mobsleft)
end

function gqmobdead (name, line, wildcards)
  phelper:mdebug('gqmobdead')
  local tenemy = enemy
  local found = false
  if not phelper.maxkills then
    gq_info.qpmobs = gq_info.qpmobs + 3
  end
  for i,v in ipairs(mobsleft) do
    if v.clean == string.lower(tenemy) then
      found = true
      if verify_number(v.num) == 1 then
        table.remove(mobsleft, i)
      else
        v.num = verify_number(v.num) - 1
      end
      break
    end
  end
  if found then
    raisegq(3, 'mobs', mobsleft)
  else
    print("GQ: could not find mob", enemy)
    Execute("gq check")
  end
end

function gqmaxkills(name, line, wildcards)
  phelper:mdebug('gqmaxkills')
  phelper:set('maxkills', true, {silent=true})
end

function gqwon(name, line, wildcards)
  phelper:mdebug('gqwon')
  gq_info['won'] = 1
  gq_info['finishtime'] = GetInfo(304)
  phelper:enabletriggroup("gqrew", true)
end

function gqwonannounce(name, line, wildcards)
  phelper:mdebug('gqwonannounce')
  if charname == wildcards.winner then
    raisegq(4, 'gq_info', gq_info)
    gqreset(phelper.joined)
  end
end

function gqreward (name, line, wildcards)
  phelper:mdebug('gqreward')
  local type = wildcards.type
  local amount = verify_number(wildcards.amount)
  gq_info[rewardtable[type]] = amount
  gq_info['won'] = 1
end

function gqcheck( name, line, wildcards)
  phelper:mdebug('gqcheck')
  mobsleft = {}
  phelper:enabletriggroup("gqcheck", true)
end -- gq_check

function gqquit(name, line, wildcards)
  phelper:mdebug('gqquit')
  if gq_info['qpmobs'] > 0 then
    gq_info['finishtime'] = GetInfo(304)
    raisegq(4, 'gq_info', gq_info)
  end
  gqreset(phelper.joined)
  raisegq(5)
end

function gqextfin(name, line, wildcards)
  phelper:mdebug('gqextfin')
  if gq_info['qpmobs'] > 0 then
    gq_info['completed'] = 1
    gq_info['finishtime'] = GetInfo(304)
    raisegq(4, 'gq_info', gq_info)
    gqreset(phelper.joined)
  end
end

function gqnote(name, line, wildcards)
  phelper:mdebug('gqnote')
  if verify_number(wildcards.gqnum) == phelper.joined then
    raisegq(6)
    if gq_info['qpmobs'] > 0 then
      gq_info['finishtime'] = GetInfo(304)
      raisegq(4, 'gq_info', gq_info)
    end
    gqreset(phelper.joined)
  end
  if gqsdeclared[verify_number(wildcards.gqnum)] then
    gqsdeclared[verify_number(wildcards.gqnum)] = nil
  end
  if gqsstarted[verify_number(wildcards.gqnum)] then
    gqsstarted[verify_number(wildcards.gqnum)] = nil
  end
  checkgqavailable()
end

function raisegq(number, dataname, data)
  if dataname ~= nil then
    var[dataname] = serialize.save(dataname, data)
    phelper:broadcast(number, var[dataname])
  else
    phelper:broadcast(number)
  end
  SaveState()
end

function gqreset(gqnum)
  phelper:mdebug('gqreset')

  gqnum = verify_number(gqnum)

  if gqnum then
    if gqsdeclared[gqnum] then
      gqsdeclared[gqnum] = nil
    end
    if gqsstarted[gqnum] then
      gqsstarted[gqnum] = nil
    end
    checkgqavailable()
  end
  phelper:enabletriggroup("gqcheck", false)
  phelper:enabletriggroup("gqin", false)
  phelper:enabletriggroup("gqrew", false)
  phelper:set('joined', 'default', {silent=true})
  phelper:set('maxkills', 'default', {silent=true})
  SaveState()
end

function checkgqavailable()
  if tableCountItems(gqsdeclared) > 0 then
    raisegq(7)
  else
    raisegq(8)
  end
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)

  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval", "char")
      tt = assert (loadstring ('return ' .. gmcparg or ""))()

      if tt['status'] then
        curlevel = tt.status.level
        enemy = tt.status.enemy
      end

      if tt['base'] then
        charname = tt.base.name
      end

    end
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()

  assert (loadstring (GetVariable ("gq_info") or "")) ()

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("aard_GMCP_handler", "3e7dedbe37e44942dd46d264")

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()
  var.gq_info = serialize.save( "gq_info", gq_info )

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'bgq')
phelper:set_default('plugin_colour', 'orange')


phelper:add_setting('joined', {help="the gq number joined", type="number", default=-1, readonly=true})
phelper:add_setting('maxkills', {help="true if maxkills", type="bool", default=false, readonly=true})

phelper:enable()

]]>
</script>
</muclient>

