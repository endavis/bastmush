<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, April 11, 2009, 9:13 PM -->
<!-- MuClient version 4.40 -->
<!-- $Id$ -->
<!-- Plugin "StatMonitor" generated by Plugin Wizard -->

<muclient>
<plugin
   name="StatMonitor"
   author="Bast"
   id="a8f5b1a3b1373cd99d6bfb47"
   language="Lua"
   purpose="Monitor and Show Stats"
   save_state="y"
   date_written="2009-04-11 21:11:47"
   requires="4.73"
   version="6.1"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

</triggers>

<!--  Aliases  -->

<aliases>

</aliases>

<timers>
  <timer
   name="StatReport"
   script="StatReport"
   enabled="y"
   minute="59"
   at_time="n"
   >
  </timer>

</timers>

<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "serialize"
require "commas"
require "pluginhelper"
require "verify"
require "chardb"
require "aardutils"
require "tprint"
require "ldplugin"
require "stringfuncs"
require "colours"

db = Statdb:new{}

quest_stuff = {}
hourtotals = {}

function DisplayInfo( info, type )
  local typechan = phelper[type..'chan']
  if typechan == 'None' or typechan == 'commlog' or not typechan then
    TextToColourTell(strjoin('', info))
    ColourNote( "", "", "" )
    if typechan == "commlog" and IsPluginInstalled("b555825a4a5700c35fa80780") and GetPluginInfo("b555825a4a5700c35fa80780", 17) then
      CallPlugin("b555825a4a5700c35fa80780","storeFromOutside",strjoin('', info))
    end
  else
    SendNoEcho(typechan .. ' ' .. strjoin('', info))
  end
end

function colourwrap(tstr, wtype)
  if wtype == 'stat' then
    local statcolour = phelper.statcolour
    if statcolour:find('@') == 1 then
      return statcolour .. tostring(tstr) .. "@w"
    else
      return "@W" .. tostring(tstr) .. "@w"
    end
  else
    local infocolour = phelper.infocolour
    if infocolour:find('@') == 1 then
      return infocolour .. tostring(tstr) .. "@w"
    else
      return "@W" .. tostring(tstr) .. "@w"
    end
  end
end

function formatpup()
  local starttime = 0
  local finishtime = 0
  local mobskilled = 0
  local mobsavexp = 0
  local length = nil
  local pvar = GetPluginVariable(  "aaa0ab9ed92f8fc614664bd1" , "levelinfo")

  --get the mob info
  loadstring( pvar )()
  levelgains = levelinfo
  local tmsg = { colourwrap("StatMonitor") }
  table.insert(tmsg, colourwrap(": "))
  table.insert(tmsg, colourwrap("Gained a "..levelgains.type..": "))
  table.insert(tmsg, colourwrap(levelgains.trains, 'stat'))
  local totaltrains = tonumber(levelgains.trains)
  if levelgains.bonustrains and tonumber(levelgains.bonustrains) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(levelgains.bonustrains, 'stat'))
    totaltrains = totaltrains + tonumber(levelgains.bonustrains)
  end
  if levelgains.blessingtrains and tonumber(levelgains.blessingtrains) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(levelgains.blessingtrains, 'stat'))
    totaltrains = totaltrains + tonumber(levelgains.blessingtrains)
  end
  if totaltrains ~= tonumber(levelgains.trains) then
    table.insert(tmsg, colourwrap(' = '))
    table.insert(tmsg, colourwrap(totaltrains, 'stat'))
  end
  table.insert( tmsg, colourwrap(' trains '))
  local statcount = 0
  for i,v in ipairs({"str", "int", "wis", "dex", "con", "luc"}) do
    if levelgains[v] > 0 then
      statcount = statcount + 1
      if statcount ~= 1 then
        table.insert(tmsg, colourwrap('+'))
      end
      table.insert(tmsg, colourwrap(v, 'stat'))
    end
  end
  if statcount > 0 then
    table.insert( tmsg, colourwrap(" bonus ") )
  end
  local lastrow = db:getlastrowid('levels')
  if db:open() then
    if lastrow > 0 then
      lastrow = lastrow - 1
      for a in db.db:rows(string.format("SELECT starttime, finishtime FROM levels where level_id = %d;", lastrow)) do
        starttime = a[1]
        finishtime = a[2]
      end
      if starttime > 0 and finishtime > 0 then
        length = finishtime - starttime
        table.insert( tmsg, colourwrap(format_time(length, nil, phelper.statcolour,
                                                      phelper.infocolour, true)))
        table.insert( tmsg, " ")
      end
      if db:getlastrowid('mobkills') > 0 then
        for a in db.db:rows(string.format("SELECT count(*), AVG(totalxp) FROM mobkills where time > %d and time < %d and xp > 0", starttime, finishtime)) do
          mobskilled = a[1]
          mobsavexp = a[2]
        end
        if mobskilled ~= nil and mobsavexp ~= nil then
          table.insert( tmsg, colourwrap(mobskilled, 'stat') )
          table.insert( tmsg, colourwrap(" mobs killed (") )
          table.insert( tmsg, colourwrap(string.format( "%02.02f", mobsavexp ), 'stat') )
          table.insert( tmsg, colourwrap("xp/mob") )
          if length and tonumber(char.base.perlevel)/(length/60) > phelper.exppermin then
            local exp_per_min = tonumber(char.base.perlevel)/(length/60)
            table.insert( tmsg, colourwrap(string.format( " %d", exp_per_min ), 'stat') )
            table.insert( tmsg, colourwrap("xp/min)") )
          else
            table.insert( tmsg, colourwrap(")") )
          end
        end
      end
      db:close()
    end
  end
  DisplayInfo( tmsg, 'level' )

end

function formatlevel()
  local starttime = 0
  local finishtime = 0
  local mobskilled = 0
  local mobsavexp = 0
  local length = nil
  local pvar = GetPluginVariable(  "aaa0ab9ed92f8fc614664bd1" , "levelinfo")

  --get the mob info
  loadstring( pvar )()
  levelgains = levelinfo

  level = db:getstat('totallevels')

  local tmsg = { colourwrap("StatMonitor") }
  table.insert(tmsg, colourwrap(": "))
  table.insert( tmsg, colourwrap("Gained a "..levelgains.type..": "))
  table.insert( tmsg, colourwrap(levelgains.hp, 'stat') )
  table.insert( tmsg, colourwrap("hp ") )
  table.insert( tmsg, colourwrap(levelgains.mp, 'stat') )
  table.insert( tmsg, colourwrap("mp ") )
  table.insert( tmsg, colourwrap(levelgains.mv, 'stat') )
  table.insert( tmsg, colourwrap("mv ") )
  table.insert(tmsg, colourwrap(levelgains.trains, 'stat'))
  local totaltrains = tonumber(levelgains.trains)
  if levelgains.bonustrains and tonumber(levelgains.bonustrains) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(levelgains.bonustrains, 'stat'))
    table.insert(tmsg, colourwrap('B', 'stat'))
    totaltrains = totaltrains + tonumber(levelgains.bonustrains)
  end
  if levelgains.blessingtrains and tonumber(levelgains.blessingtrains) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(levelgains.blessingtrains, 'stat'))
    table.insert(tmsg, colourwrap('E', 'stat'))
    totaltrains = totaltrains + tonumber(levelgains.blessingtrains)
  end
  if totaltrains ~= tonumber(levelgains.trains) then
    table.insert(tmsg, colourwrap('='))
    table.insert(tmsg, colourwrap(totaltrains, 'stat'))
  end
  table.insert( tmsg, colourwrap(' trains '))
  table.insert( tmsg, colourwrap(levelgains.pracs, 'stat') )
  table.insert( tmsg, colourwrap(" pracs ") )
  local statcount = 0
  for i,v in ipairs({"str", "int", "wis", "dex", "con", "luc"}) do
    if levelgains[v] > 0 then
      statcount = statcount + 1
      if statcount ~= 1 then
        table.insert(tmsg, colourwrap('+'))
      end
      table.insert(tmsg, colourwrap(v, 'stat'))
    end
  end
  if statcount > 0 then
    table.insert( tmsg, colourwrap(" bonus ") )
  end
  if level ~= nil then
    local lastrow = db:getlastrowid('levels')
    if db:open() then
      if lastrow > 0 and level % 201 > 2 then
        lastrow = lastrow - 1
        oldlevel = level - 1
        for a in db.db:rows(string.format("SELECT starttime, finishtime FROM levels where level = %d;", oldlevel)) do
          starttime = a[1]
          finishtime = a[2]
        end
        if starttime > 0 and finishtime > 0 then
          length = finishtime - starttime
          table.insert( tmsg, colourwrap(format_time(length, nil, phelper.statcolour,
                                                      phelper.infocolour, true)))
          table.insert( tmsg, " ")
        end
      end
        if db:getlastrowid('mobkills') > 0 then
        for a in db.db:rows(string.format("SELECT count(*), AVG(totalxp) FROM mobkills where level = %d and xp > 0", oldlevel)) do
          mobskilled = a[1]
          mobsavexp = a[2]
        end
        if mobskilled ~= nil and mobsavexp ~= nil then
          table.insert( tmsg, colourwrap(mobskilled, 'stat') )
          table.insert( tmsg, colourwrap(" mobs killed (") )
          table.insert( tmsg, colourwrap(string.format( "%02.02f", mobsavexp ), 'stat') )
          table.insert( tmsg, colourwrap("xp/mob") )
          if length and tonumber(char.base.perlevel)/(length/60) > phelper.exppermin then
            local exp_per_min = tonumber(char.base.perlevel)/(length/60)
            table.insert( tmsg, colourwrap(string.format( " %d", exp_per_min ), 'stat') )
            table.insert( tmsg, colourwrap("xp/min)") )
          else
            table.insert( tmsg, colourwrap(")") )
          end
        end
      end
      db:close()
    end
  end
  DisplayInfo( tmsg, 'level' )
end

function formatquest()
  local quest_total = -1
  local quest_avg = 0
  local quest_tavg = 0
  local pvar = GetPluginVariable(  "aaa8a9eda20fa11787c6b438" , "quest_info")

  --get the quest info
  loadstring( pvar )()
  quest_stuff = quest_info

  local tmsg = { colourwrap("StatMonitor") }
  table.insert(tmsg, colourwrap(": "))
  table.insert(tmsg, colourwrap("Quest finished for "))
  length = quest_stuff.finishtime - quest_stuff.starttime
  local years, days, hours, mins, secs = SecondsToDHMS(length)
  table.insert(tmsg, colourwrap(tostring(quest_stuff.qp), 'stat'))
  if quest_stuff.lucky and tonumber(quest_stuff.lucky) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(quest_stuff.lucky, 'stat'))
  end
  if quest_stuff.mccp and tonumber(quest_stuff.mccp) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(quest_stuff.mccp, 'stat'))
  end
  if quest_stuff.tierqp and tonumber(quest_stuff.tierqp) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(quest_stuff.tierqp, 'stat'))
  end
  if quest_stuff.opk and tonumber(quest_stuff.opk) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(quest_stuff.opk, 'stat'))
  end
  if quest_stuff.hardcore and tonumber(quest_stuff.hardcore) > 0 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap(quest_stuff.hardcore, 'stat'))
  end
  if quest_stuff.daily and tonumber(quest_stuff.daily) == 1 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap('E', 'stat'))
  end
  if quest_stuff.double and tonumber(quest_stuff.double) == 1 then
    table.insert(tmsg, colourwrap('+'))
    table.insert(tmsg, colourwrap('D', 'stat'))
  end
  table.insert(tmsg, colourwrap(' = '))
  table.insert(tmsg, colourwrap(quest_stuff.totqp, 'stat'))
  table.insert(tmsg, colourwrap('qp'))
  if quest_stuff.tp and tonumber(quest_stuff.tp) > 0 then
    table.insert( tmsg, " ".. colourwrap(quest_stuff.tp, 'stat') )
    table.insert( tmsg, colourwrap("TP") )
  end
  if quest_stuff.trains and tonumber(quest_stuff.trains) > 0 then
    table.insert( tmsg, " ".. colourwrap(quest_stuff.trains, 'stat') )
    table.insert( tmsg, colourwrap("tr") )
  end
  if quest_stuff.pracs and tonumber(quest_stuff.pracs) > 0 then
    table.insert( tmsg, " ".. colourwrap(quest_stuff.pracs, 'stat') )
    table.insert( tmsg, colourwrap("pr") )
  end
  table.insert( tmsg, colourwrap(". It took "))
  table.insert( tmsg, colourwrap(string.format( "%02d", mins ), 'stat') )
  table.insert( tmsg, colourwrap("m:") )
  table.insert( tmsg, colourwrap(string.format( "%02d", secs ), 'stat') )
  table.insert( tmsg, colourwrap("s.") )
  if db:open() then
    if db:getlastrowid('quests') > 0 then
      for a in db.db:rows("SELECT COUNT(*), AVG(totqp), AVG(finishtime - starttime) FROM quests where failed = 0") do
        quest_total = a[1]
        quest_avg = a[2]
        quest_tavg = a[3]
      end
      if quest_total > 1 then
        table.insert( tmsg, colourwrap(" Avg: ", quest_avg ) )
        table.insert( tmsg, colourwrap(string.format( "%02.2f", quest_avg ), 'stat') )
        table.insert( tmsg, colourwrap(" qp/quest") )
        table.insert( tmsg, colourwrap(" over ") )
        table.insert( tmsg, colourwrap(string.format( "%0d", quest_total ), 'stat') )
        table.insert( tmsg, colourwrap(" quests.") )
      end
    end
    db:close()
  end
  DisplayInfo( tmsg, 'quest' )
end

function formatcp()
  local pvar = GetPluginVariable(  "aaa66f81c50828bbbfda7100" , "cp_info")
  --get the cp info
  loadstring( pvar )()
  cp_stuff = cp_info
  if cp_stuff.failed == 0 then
    local tmsg = { colourwrap("StatMonitor") }
    table.insert(tmsg, colourwrap(": "))
    table.insert(tmsg, colourwrap("CP finished for "))
    table.insert(tmsg, colourwrap(cp_stuff.qp, 'stat'))
    if cp_stuff.bonusqp and tonumber(cp_stuff.bonusqp) > 0 then
      table.insert(tmsg, colourwrap('+'))
      table.insert(tmsg, colourwrap(cp_stuff.bonusqp, 'stat'))
      table.insert(tmsg, colourwrap('B='))
      table.insert(tmsg, colourwrap(tonumber(cp_stuff.qp) + tonumber(cp_stuff.bonusqp), 'stat'))
    end
    table.insert(tmsg, colourwrap("qp"))
    if cp_stuff.tp and tonumber(cp_stuff.tp) > 0 then
      table.insert(tmsg, colourwrap(" "))
      table.insert( tmsg,  colourwrap(cp_stuff.tp, 'stat') )
      table.insert( tmsg, colourwrap("TP") )
    end
    if cp_stuff.trains and tonumber(cp_stuff.trains) > 0 then
      table.insert(tmsg, colourwrap(" "))
      table.insert( tmsg, colourwrap(cp_stuff.trains, 'stat') )
      table.insert( tmsg, colourwrap("tr") )
    end
    if cp_stuff.pracs and tonumber(cp_stuff.pracs) > 0 then
      table.insert(tmsg, colourwrap(" "))
      table.insert( tmsg, colourwrap(cp_stuff.pracs, 'stat') )
      table.insert( tmsg, colourwrap("pr") )
    end
    table.insert( tmsg, colourwrap("."))
    if cp_stuff.finishtime and cp_stuff.starttime then
      length = cp_stuff.finishtime - cp_stuff.starttime
      table.insert( tmsg, colourwrap(" It took "))
      table.insert( tmsg, colourwrap(format_time(length, nil, phelper.statcolour,
                                                      phelper.infocolour, true)))
      table.insert( tmsg, colourwrap("."))
    end

    DisplayInfo( tmsg, 'cp' )
  end
end

function formatgq()
  local pvar = GetPluginVariable(  "aaa77f81c5408278ccda7100", "gq_info")
  --get the gq info
  loadstring( pvar )()

  local tmsg = { colourwrap("StatMonitor") }
  table.insert(tmsg, colourwrap(": "))
  table.insert(tmsg, colourwrap("GQ finished for "))
  table.insert(tmsg, colourwrap(gq_info.qp, 'stat'))
  table.insert( tmsg, colourwrap('+') )
  table.insert( tmsg, colourwrap(gq_info.qpmobs, 'stat') )
  table.insert(tmsg, colourwrap('qp'))
  if gq_info.tp and tonumber(gq_info.tp) > 0 then
    table.insert(tmsg, colourwrap(" "))
    table.insert( tmsg, colourwrap(gq_info.tp, 'stat') )
    table.insert( tmsg, colourwrap("TP") )
  end
  if gq_info.trains and tonumber(gq_info.trains) > 0 then
    table.insert(tmsg, colourwrap(" "))
    table.insert( tmsg, colourwrap(gq_info.trains, 'stat') )
    table.insert( tmsg, colourwrap("tr") )
  end
  if gq_info.pracs and tonumber(gq_info.pracs) > 0 then
    table.insert(tmsg, colourwrap(" "))
    table.insert( tmsg, colourwrap(gq_info.pracs, 'stat') )
    table.insert( tmsg, colourwrap("pr") )
  end
  table.insert( tmsg, colourwrap("."))
  if gq_info.finishtime and gq_info.starttime then
    length = gq_info.finishtime - gq_info.starttime
    table.insert( tmsg, colourwrap(" It took "))
    table.insert( tmsg, colourwrap(format_time(length, nil, phelper.statcolour,
                                                    phelper.infocolour, true)))
    table.insert( tmsg, colourwrap("."))
  end
  DisplayInfo( tmsg, 'gq' )
end

function formathour(type, stats)
  ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-10s -" , type),
             RGBColourToName(var.plugin_colour), "black", string.format("%6d", stats.total or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%9d", stats.xp or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%7d", stats.qp or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%5d", stats.tp or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%10d", stats.gold or 0)
             )
  hourtotals.qp = hourtotals.qp + (stats.qp or 0)
  hourtotals.gold = hourtotals.gold + (stats.gold or 0)
  hourtotals.xp = hourtotals.xp + (stats.xp or 0)
  hourtotals.tp = hourtotals.tp + (stats.tp or 0)
end

function formatnodata(type)
  ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-10s -" , type),
             RGBColourToName(var.plugin_colour), "black", ' No Data'
            )
end


function formathourcol()
  ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-10s -" , "Type"),
             RGBColourToName(var.plugin_colour), "black", string.format("%6s", "Tot"),
             RGBColourToName(var.plugin_colour), "black", string.format("%9s", "XP"),
             RGBColourToName(var.plugin_colour), "black", string.format("%7s", "QP"),
             RGBColourToName(var.plugin_colour), "black", string.format("%5s", "Tp"),
             RGBColourToName(var.plugin_colour), "black", string.format("%10s", "Gold")
            )
end

function formattotals(totals)
  ColourNote(RGBColourToName(var.plugin_colour), "black", string.format("%-10s -" , "Totals"),
             RGBColourToName(var.plugin_colour), "black", string.format("%6s", " "),
             RGBColourToName(var.plugin_colour), "black", string.format("%9d", totals.xp or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%7d", totals.qp or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%5d", totals.tp or 0),
             RGBColourToName(var.plugin_colour), "black", string.format("%10d", totals.gold or 0)
             )
end

function StatReport(minutes)
  local queststats = {}
  local cpstats = {}
  local gqstats = {}
  local mobstats = {}
  hourtotals.qp = 0
  hourtotals.gold = 0
  hourtotals.xp = 0
  hourtotals.tp = 0
  finishtime = GetInfo(304)
  minutes = tonumber(minutes) or var.reportminutes
  local starttime = finishtime - (minutes * 60)
  if db:open() then
    if db:getlastrowid('quests') > 0 then
      for a in db.db:rows(string.format("SELECT COUNT(*), SUM(totqp), SUM(gold), SUM(tp) FROM quests where finishtime > %d;", starttime)) do
        queststats.total = a[1] or 0
        queststats.qp = a[2] or 0
        queststats.gold = a[3]  or 0
        queststats.tp = a[4] or 0
      end
    end
    if db:getlastrowid('gquests') > 0 then
      for a in db.db:rows(string.format("SELECT COUNT(*), SUM(qp + qpmobs), SUM(gold), SUM(tp) FROM gquests where finishtime > %d;", starttime)) do
        gqstats.total = a[1]
        gqstats.qp = a[2]
        gqstats.gold = a[3]
        gqstats.tp = a[4]
      end
    end
    if db:getlastrowid('campaigns') > 0 then
      for a in db.db:rows(string.format("SELECT COUNT(*), SUM(qp+bonusqp), SUM(gold), SUM(tp) FROM campaigns where finishtime > %d and failed = 0;", starttime)) do
        cpstats.total = a[1]
        cpstats.qp = a[2]
        cpstats.gold = a[3]
        cpstats.tp = a[4]
      end
    end
    if db:getlastrowid('mobkills') > 0 then
      for a in db.db:rows(string.format("SELECT COUNT(*), SUM(totalxp), SUM(gold), SUM(tp) FROM mobkills where time > %d;", starttime)) do
        mobstats.total = a[1]
        mobstats.xp = a[2]
        mobstats.gold = a[3]
        mobstats.tp = a[4]
      end
    end
    db:close()
  end
  ColourNote(RGBColourToName(var.plugin_colour), "black", "Stats for the Last " .. convert_time(minutes * 60))
  formathourcol()
  ColourNote(RGBColourToName(var.plugin_colour), "black",   "----------------------------------------------------")
  if queststats.total == nil then
    formatnodata("Quests")
  else
    formathour("Quests", queststats)
  end
  if cpstats.total == nil then

  else
    formathour("CPs", cpstats)
  end
  if gqstats.total == nil then

  else
    formathour("GQs", gqstats)
  end
  if mobstats.total == nil then
    formatnodata("Mobs")
  else
    formathour("Mobs", mobstats)
  end
  ColourNote(RGBColourToName(var.plugin_colour), "black",   "----------------------------------------------------")
  formattotals(hourtotals)
  ColourNote("", "", "")
end

function settimer()
   local hours = 0
   local minutes = 0
   numb = tonumber(var.showminutes)
   if numb > 59 then
     hours = math.floor(numb/60)
     minutes = numb - (hours * 60)
   else
     minutes = numb
   end
   if tonumber(var.showminutes) == -1 and GetTimerInfo ("StatReport", 6) then
     EnableTimer("StatReport", false)
   else
     if hours > 0 then
       SetTimerOption ("StatReport", "hour", hours)
     else
       SetTimerOption ("StatReport", "hour", 0)
     end
     if minutes > 0 then
       SetTimerOption ("StatReport", "minute", minutes)
     else
       SetTimerOption ("StatReport", "minute", 0)
     end
     if not GetTimerInfo ("StatReport", 6) then
       EnableTimer("StatReport", true)
     end
   end
end

function cmd_report(cmddict)
  if #cmddict >= 1 then
    if cmddict[1] == "" then
      minutes = round((GetInfo(304) - GetInfo(301)) / 60)
      --  minutes = round(GetInfo(301) / 60)
    else
      minutes = tonumber(cmddict[1])
    end
  end
  StatReport(minutes)
end -- cmd_report

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == "aaa8a9eda20fa11787c6b438" and (msg == 6 or msg == 8) then
    DoAfterSpecial(.1 , 'formatquest()', 12)
  elseif id == "aaa0ab9ed92f8fc614664bd1" and msg == 1 then
    local pvar = GetPluginVariable(  "aaa0ab9ed92f8fc614664bd1", 'levelinfo' )

    -- get the info
    loadstring( pvar )()
    local info = levelinfo
    if info.type == 'level' then
      DoAfterSpecial(.1, 'formatlevel()', 12)
    else
      DoAfterSpecial(.1, 'formatpup()', 12)
    end
  elseif id == "aaa66f81c50828bbbfda7100" and (msg == 3 or msg == 4) then
    DoAfterSpecial(.1, 'formatcp()', 12)
  elseif id == "aaa77f81c5408278ccda7100" and msg == 4 then
    DoAfterSpecial(.1, 'formatgq()', 12)
  elseif id == '3e7dedbe37e44942dd46d264' then
    if text:find("char") then
      local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()
    end
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin("StatDB", 'a749d26f1cb3e00282727e55')
  ldplugin('broadcast_quest', 'aaa8a9eda20fa11787c6b438')
  ldplugin('broadcast_level', 'aaa0ab9ed92f8fc614664bd1')
  ldplugin('broadcast_cp', 'aaa66f81c50828bbbfda7100')
  ldplugin('broadcast_gq', 'aaa77f81c5408278ccda7100')

  if IsConnected() then
    local res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
    char = assert (loadstring ('return ' .. gmcparg or ""))()
  end

  phelper:OnPluginEnable()
end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

]]>
</script>

<script>
<![CDATA[


phelper:set_default('cmd', 'statmn')
phelper:set_default('plugin_colour', 'orange')

phelper:add_setting('showminutes', {help="the number of minutes between StatMon output, -1 to disable", type="number", after=settimer, default=59, sortlev=10})
phelper:add_setting('reportminutes', {help="the number of minutes that Statmon reports on", type="number", default=60, sortlev=10})
phelper:add_setting('questchan', {help="the channel to put quest results on", type="string", default="None", sortlev=20})
phelper:add_setting('levelchan', {help="the channel to put level/pup results on", type="string", default="None", sortlev=20})
phelper:add_setting('cpchan', {help="the channel to put cp results on", type="string", default="None", sortlev=20})
phelper:add_setting('gqchan', {help="the channel to put gq results on", type="string", default="None", sortlev=20})
phelper:add_setting('statcolour', {help="colour of stats in a statmonitor display, this only takes Aardwolf colour codes", type="aardcolour", default="@W", sortlev=20})
phelper:add_setting('infocolour', {help="colour of info in a statmonitor colour, this only takes Aardwolf colour codes", type="aardcolour", default="@G", sortlev=20})
phelper:add_setting('exppermin', {help="the threshhold that when leveling, exp per min is shown", type="number", default="20", sortlev=20})


phelper:add_cmd('report', {func=cmd_report, help="show stats for the last x minutes, x being what is passed as an argument"})

phelper:enable()


]]>
</script>
</muclient>
